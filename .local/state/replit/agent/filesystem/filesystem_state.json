{"file_contents":{"README.md":{"content":"\"# Ai-Time-Table\" \n","size_bytes":19},"app.py":{"content":"import os\nimport json\nimport logging\nfrom datetime import datetime\nfrom flask import Flask, render_template, request, jsonify, send_file\nfrom flask_cors import CORS\nfrom reportlab.lib.pagesizes import A4, landscape\nfrom reportlab.lib import colors\nfrom reportlab.lib.units import inch\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\nfrom reportlab.lib.styles import getSampleStyleSheet\nimport openpyxl\nfrom openpyxl.styles import Font, Alignment, PatternFill, Border, Side\nfrom openpyxl.utils import get_column_letter\nimport tempfile\nimport uuid\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev_secret_key_change_in_production\")\nCORS(app)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/dashboard')\ndef dashboard():\n    return render_template('dashboard.html')\n\n@app.route('/timetable/course')\ndef timetable_course():\n    return render_template('timetable_course.html')\n\n@app.route('/timetable/class')\ndef timetable_class():\n    return render_template('timetable_class.html')\n\n@app.route('/manage')\ndef manage():\n    return render_template('manage.html')\n\n@app.route('/history')\ndef history():\n    return render_template('history.html')\n\n@app.route('/export/pdf', methods=['POST'])\ndef export_pdf():\n    try:\n        data = request.json\n        \n        # Create temporary file for PDF\n        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')\n        \n        # Create PDF document\n        doc = SimpleDocTemplate(temp_file.name, pagesize=landscape(A4))\n        elements = []\n        \n        # Styles\n        styles = getSampleStyleSheet()\n        title_style = styles['Title']\n        \n        # Title\n        title = f\"Timetable - {data.get('courseName', 'N/A')} - {data.get('className', 'N/A')}\"\n        elements.append(Paragraph(title, title_style))\n        elements.append(Spacer(1, 0.2*inch))\n        \n        # Create table data\n        timetable_grid = data.get('timetableGrid', [])\n        if not timetable_grid:\n            elements.append(Paragraph(\"No timetable data available\", styles['Normal']))\n        else:\n            # Headers\n            headers = ['Time'] + [f'Day {i+1}' for i in range(len(timetable_grid[0]) if timetable_grid else 0)]\n            table_data = [headers]\n            \n            # Rows\n            for i, row in enumerate(timetable_grid):\n                row_data = [f'Period {i+1}']\n                for cell in row:\n                    if cell.get('isBreak', False):\n                        row_data.append('BREAK')\n                    elif cell.get('subject'):\n                        cell_text = f\"{cell['subject']}\\n{cell.get('teacher', '')}\"\n                        row_data.append(cell_text)\n                    else:\n                        row_data.append('Free')\n                table_data.append(row_data)\n            \n            # Create table\n            table = Table(table_data)\n            table.setStyle(TableStyle([\n                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),\n                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),\n                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n                ('FONTSIZE', (0, 0), (-1, 0), 10),\n                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),\n                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),\n                ('GRID', (0, 0), (-1, -1), 1, colors.black)\n            ]))\n            \n            elements.append(table)\n        \n        # Build PDF\n        doc.build(elements)\n        \n        return send_file(temp_file.name, as_attachment=True, download_name='timetable.pdf')\n    \n    except Exception as e:\n        logging.error(f\"PDF export error: {str(e)}\")\n        return jsonify({'error': 'Failed to generate PDF'}), 500\n\n@app.route('/export/excel', methods=['POST'])\ndef export_excel():\n    try:\n        data = request.json\n        \n        # Create workbook and worksheet\n        wb = openpyxl.Workbook()\n        ws = wb.active\n        ws.title = \"Timetable\"\n        \n        # Title\n        title = f\"Timetable - {data.get('courseName', 'N/A')} - {data.get('className', 'N/A')}\"\n        ws.merge_cells('A1:H1')\n        ws['A1'] = title\n        ws['A1'].font = Font(size=16, bold=True)\n        ws['A1'].alignment = Alignment(horizontal='center')\n        \n        # Headers\n        headers = ['Time'] + [f'Day {i+1}' for i in range(data.get('workingDays', 5))]\n        for col, header in enumerate(headers, 1):\n            cell = ws.cell(row=3, column=col, value=header)\n            cell.font = Font(bold=True)\n            cell.fill = PatternFill(start_color=\"CCCCCC\", end_color=\"CCCCCC\", fill_type=\"solid\")\n            cell.alignment = Alignment(horizontal='center')\n        \n        # Timetable data\n        timetable_grid = data.get('timetableGrid', [])\n        for row_idx, row in enumerate(timetable_grid, 4):\n            ws.cell(row=row_idx, column=1, value=f'Period {row_idx-3}')\n            \n            for col_idx, cell_data in enumerate(row, 2):\n                cell = ws.cell(row=row_idx, column=col_idx)\n                \n                if cell_data.get('isBreak', False):\n                    cell.value = 'BREAK'\n                    cell.fill = PatternFill(start_color=\"FFE6E6\", end_color=\"FFE6E6\", fill_type=\"solid\")\n                elif cell_data.get('subject'):\n                    subjectCode = cell_data.get('subjectCode', '')\n                    subject = cell_data.get('subject', '')\n                    teacher = cell_data.get('teacher', '')\n                    cell.value = f\"{subjectCode}\\n{subject}\\n{teacher}\"\n                else:\n                    cell.value = 'Free'\n                \n                cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)\n        \n        # Add borders\n        thin_border = Border(\n            left=Side(style='thin'),\n            right=Side(style='thin'),\n            top=Side(style='thin'),\n            bottom=Side(style='thin')\n        )\n        \n        for row in ws.iter_rows(min_row=3, max_row=ws.max_row, min_col=1, max_col=ws.max_column):\n            for cell in row:\n                cell.border = thin_border\n        \n        # Auto-adjust column widths\n        for col_idx in range(1, ws.max_column + 1):\n            max_length = 0\n            column_letter = get_column_letter(col_idx)\n            \n            for row_idx in range(1, ws.max_row + 1):\n                cell = ws.cell(row=row_idx, column=col_idx)\n                try:\n                    if cell.value and len(str(cell.value)) > max_length:\n                        max_length = len(str(cell.value))\n                except:\n                    pass\n            \n            adjusted_width = min(max_length + 2, 50)\n            ws.column_dimensions[column_letter].width = adjusted_width\n        \n        # Save to temporary file\n        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx')\n        wb.save(temp_file.name)\n        \n        return send_file(temp_file.name, as_attachment=True, download_name='timetable.xlsx')\n    \n    except Exception as e:\n        logging.error(f\"Excel export error: {str(e)}\")\n        return jsonify({'error': 'Failed to generate Excel file'}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":7440},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-cors>=6.0.1\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"openpyxl>=3.1.5\",\n    \"psycopg2-binary>=2.9.10\",\n    \"reportlab>=4.4.3\",\n]\n","size_bytes":352},"replit.md":{"content":"# Overview\n\nAI Timetable Generator is a Flask-based web application designed for educational institutions to create, manage, and export automated timetables. The system provides an intuitive interface for colleges and schools to generate course-wise and class/section-wise schedules, manage subjects and teachers, and export timetables in PDF and Excel formats. The application emphasizes user experience with responsive design, smooth animations, and comprehensive timetable management capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a traditional server-rendered architecture with Flask serving HTML templates enhanced by client-side JavaScript. The frontend employs Bootstrap 5 for responsive design and Font Awesome for iconography. CSS animations and JavaScript modules provide interactive features including form validation, dynamic content loading, and smooth transitions between states.\n\n## Backend Architecture\nBuilt on Flask with a lightweight MVC pattern where routes handle HTTP requests and render appropriate templates. The application uses Python's ReportLab library for PDF generation and OpenPyXL for Excel export functionality. The backend implements a stateless design with no database persistence, relying entirely on client-side storage for data management.\n\n## Data Storage Solution\nThe system uses browser LocalStorage as the primary data persistence layer, storing user credentials, timetable configurations, subject/teacher data, and generated timetables. This approach eliminates server-side database requirements but limits data portability across devices. Data is structured as JSON objects with separate storage keys for different entity types (users, sessions, subjects, history).\n\n## Authentication and Authorization\nImplements a simple client-side authentication system using LocalStorage to maintain user sessions. The authentication flow includes signup/login forms with validation, session management through stored user tokens, and route protection requiring authentication for dashboard access. No server-side session management or password encryption is implemented.\n\n## Timetable Generation Logic\nThe core algorithm generates timetables by processing user inputs (working days, subjects, teachers, time slots) and creating structured schedules. The system supports both course-wise and class/section-wise generation modes with configurable parameters including break periods, daily working hours, and subject-teacher assignments.\n\n# External Dependencies\n\n## Frontend Libraries\n- **Bootstrap 5.3.0**: Provides responsive grid system, component styling, and mobile-first design patterns\n- **Font Awesome 6.0.0**: Icon library for consistent visual elements across the interface\n- **Custom CSS/JavaScript**: Application-specific styling and functionality modules\n\n## Backend Python Libraries\n- **Flask**: Web framework handling routing, templating, and HTTP request processing\n- **Flask-CORS**: Enables cross-origin requests for API endpoints\n- **ReportLab**: PDF generation library for creating formatted timetable documents with tables, styling, and layout control\n- **OpenPyXL**: Excel file manipulation library for generating .xlsx format timetables with formatting, styling, and data organization\n\n## Browser APIs\n- **LocalStorage**: Primary data persistence mechanism for storing user data, application state, and generated timetables\n- **File Download API**: Enables client-side file downloads for exported PDF and Excel documents\n\n## Development Dependencies\n- **Python Logging**: Application monitoring and debugging capabilities\n- **Tempfile**: Temporary file management for export operations\n- **UUID**: Unique identifier generation for data records and session management","size_bytes":3835},"static/css/style.css":{"content":"/* Custom Variables */\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    --info-color: #0dcaf0;\n    --warning-color: #ffc107;\n    --danger-color: #dc3545;\n    --light-color: #f8f9fa;\n    --dark-color: #212529;\n    --border-radius: 8px;\n    --box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n    --transition: all 0.3s ease;\n}\n\n/* Global Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: var(--dark-color);\n    background-color: #f5f5f5;\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n@keyframes slideIn {\n    from {\n        opacity: 0;\n        transform: translateX(-30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateX(0);\n    }\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n    100% { transform: scale(1); }\n}\n\n/* Animation Classes */\n.animate-fade-in {\n    animation: fadeIn 0.8s ease-out;\n}\n\n.animate-slide-in {\n    animation: slideIn 0.8s ease-out;\n}\n\n.animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n}\n\n.animate-pulse {\n    animation: pulse 2s infinite;\n}\n\n/* Navigation */\n.navbar-brand img {\n    transition: var(--transition);\n}\n\n.navbar-brand:hover img {\n    transform: rotate(360deg);\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, var(--primary-color), #495057);\n    color: white;\n    min-height: 100vh;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><g fill=\"%23ffffff\" fill-opacity=\"0.05\"><circle cx=\"30\" cy=\"30\" r=\"4\"/></g></svg>');\n    z-index: 1;\n}\n\n.hero-content {\n    position: relative;\n    z-index: 2;\n}\n\n.hero-buttons .btn {\n    border-radius: 50px;\n    padding: 12px 30px;\n    font-weight: 600;\n    transition: var(--transition);\n}\n\n.hero-buttons .btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n}\n\n/* Feature Cards */\n.feature-cards {\n    position: relative;\n    z-index: 2;\n}\n\n.feature-card {\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: var(--border-radius);\n    padding: 2rem;\n    margin: 1rem 0;\n    text-align: center;\n    backdrop-filter: blur(10px);\n    transition: var(--transition);\n}\n\n.feature-card:hover {\n    background: rgba(255, 255, 255, 0.15);\n    transform: translateY(-5px);\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);\n}\n\n.feature-card i {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n    color: var(--warning-color);\n}\n\n.feature-card h5 {\n    margin-bottom: 1rem;\n    font-weight: 600;\n}\n\n/* Dashboard Cards */\n.dashboard-header {\n    text-align: center;\n    margin-bottom: 2rem;\n}\n\n.dashboard-card {\n    background: white;\n    border-radius: var(--border-radius);\n    padding: 2rem;\n    text-align: center;\n    box-shadow: var(--box-shadow);\n    transition: var(--transition);\n    height: 100%;\n    border: 1px solid #e9ecef;\n}\n\n.dashboard-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n    border-color: var(--primary-color);\n}\n\n.dashboard-card .card-icon {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, var(--primary-color), var(--info-color));\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1.5rem;\n    transition: var(--transition);\n}\n\n.dashboard-card:hover .card-icon {\n    transform: scale(1.1);\n    box-shadow: 0 10px 25px rgba(13, 110, 253, 0.3);\n}\n\n.dashboard-card .card-icon i {\n    font-size: 2rem;\n    color: white;\n}\n\n.dashboard-card h5 {\n    font-weight: 600;\n    margin-bottom: 1rem;\n    color: var(--dark-color);\n}\n\n.dashboard-card p {\n    color: var(--secondary-color);\n    margin-bottom: 1.5rem;\n}\n\n.dashboard-card .btn {\n    border-radius: 50px;\n    padding: 10px 25px;\n    font-weight: 600;\n    transition: var(--transition);\n}\n\n.dashboard-card .btn:hover {\n    transform: scale(1.05);\n}\n\n/* Page Headers */\n.page-header {\n    text-align: center;\n    margin-bottom: 2rem;\n    padding: 2rem 0;\n}\n\n.page-header h1 {\n    color: var(--dark-color);\n}\n\n.page-header .lead {\n    font-size: 1.1rem;\n}\n\n/* Cards */\n.card {\n    border: none;\n    box-shadow: var(--box-shadow);\n    border-radius: var(--border-radius);\n    transition: var(--transition);\n}\n\n.card:hover {\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n}\n\n.card-header {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n    border-radius: var(--border-radius) var(--border-radius) 0 0 !important;\n    font-weight: 600;\n}\n\n/* Forms */\n.form-control, .form-select {\n    border-radius: var(--border-radius);\n    border: 1px solid #ced4da;\n    transition: var(--transition);\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n.form-label {\n    font-weight: 600;\n    color: var(--dark-color);\n    margin-bottom: 0.5rem;\n}\n\n/* Buttons */\n.btn {\n    border-radius: var(--border-radius);\n    font-weight: 600;\n    transition: var(--transition);\n    border: none;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.btn-lg {\n    padding: 12px 30px;\n    font-size: 1.1rem;\n}\n\n.generate-btn {\n    background: linear-gradient(135deg, var(--success-color), #20c997);\n    border: none;\n    color: white;\n    font-size: 1.1rem;\n    padding: 15px;\n    border-radius: var(--border-radius);\n    transition: var(--transition);\n}\n\n.generate-btn:hover {\n    background: linear-gradient(135deg, #157347, #198754);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(25, 135, 84, 0.3);\n}\n\n/* Timetable Styles */\n.timetable-container {\n    overflow-x: auto;\n    background: white;\n    border-radius: var(--border-radius);\n    box-shadow: var(--box-shadow);\n}\n\n.timetable-table {\n    width: 100%;\n    min-width: 600px;\n}\n\n.timetable-table th {\n    background: linear-gradient(135deg, var(--primary-color), var(--info-color));\n    color: white;\n    padding: 15px 10px;\n    text-align: center;\n    font-weight: 600;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.timetable-table td {\n    padding: 15px 10px;\n    text-align: center;\n    border: 1px solid #dee2e6;\n    vertical-align: middle;\n    min-height: 60px;\n}\n\n.timetable-cell {\n    background: #f8f9fa;\n    border-radius: 4px;\n    padding: 8px;\n    margin: 2px;\n    min-height: 50px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    transition: var(--transition);\n}\n\n.timetable-cell:hover {\n    background: #e9ecef;\n    transform: scale(1.02);\n}\n\n.timetable-cell.break-cell {\n    background: linear-gradient(135deg, #fff3cd, #ffeaa7);\n    color: #856404;\n    font-weight: 600;\n}\n\n.timetable-cell.free-cell {\n    background: linear-gradient(135deg, #d1ecf1, #bee5eb);\n    color: #0c5460;\n}\n\n.timetable-cell.subject-cell {\n    background: linear-gradient(135deg, #d4edda, #c3e6cb);\n    color: #155724;\n}\n\n.subject-name {\n    font-weight: 600;\n    font-size: 0.9rem;\n    margin-bottom: 2px;\n}\n\n.teacher-name {\n    font-size: 0.8rem;\n    color: #6c757d;\n}\n\n/* Subject Management */\n.subject-item {\n    background: white;\n    border: 1px solid #dee2e6;\n    border-radius: var(--border-radius);\n    padding: 1rem;\n    margin-bottom: 1rem;\n    transition: var(--transition);\n}\n\n.subject-item:hover {\n    border-color: var(--primary-color);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.subject-item.selected {\n    border-color: var(--success-color);\n    background: rgba(25, 135, 84, 0.05);\n}\n\n.subject-header {\n    display: flex;\n    justify-content: between;\n    align-items: center;\n    margin-bottom: 0.5rem;\n}\n\n.subject-code {\n    background: var(--primary-color);\n    color: white;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 0.8rem;\n    font-weight: 600;\n}\n\n.teacher-badge {\n    background: var(--light-color);\n    color: var(--dark-color);\n    padding: 2px 6px;\n    border-radius: 4px;\n    font-size: 0.8rem;\n    margin: 2px;\n    display: inline-block;\n}\n\n/* History Items */\n.history-item {\n    transition: var(--transition);\n}\n\n.history-item:hover {\n    transform: translateY(-2px);\n}\n\n.history-item .card {\n    height: 100%;\n}\n\n.history-item .card-header {\n    background: linear-gradient(135deg, #f8f9fa, #e9ecef);\n}\n\n/* Modals */\n.modal-content {\n    border: none;\n    border-radius: var(--border-radius);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n}\n\n.modal-header {\n    background: linear-gradient(135deg, var(--primary-color), var(--info-color));\n    color: white;\n    border-radius: var(--border-radius) var(--border-radius) 0 0;\n}\n\n.modal-header .btn-close {\n    filter: invert(1);\n}\n\n/* Toast Notifications */\n.toast-container {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 1050;\n}\n\n.toast {\n    border: none;\n    border-radius: var(--border-radius);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n}\n\n.toast.success {\n    background: linear-gradient(135deg, var(--success-color), #20c997);\n    color: white;\n}\n\n.toast.error {\n    background: linear-gradient(135deg, var(--danger-color), #e74c3c);\n    color: white;\n}\n\n.toast.warning {\n    background: linear-gradient(135deg, var(--warning-color), #f39c12);\n    color: var(--dark-color);\n}\n\n/* Loading Spinner */\n.loading-spinner {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n    border-radius: 50%;\n    border-top-color: #fff;\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Responsive Adjustments */\n@media (max-width: 768px) {\n    .hero-section {\n        text-align: center;\n    }\n    \n    .hero-buttons .btn {\n        display: block;\n        width: 100%;\n        margin-bottom: 1rem;\n    }\n    \n    .dashboard-card {\n        margin-bottom: 2rem;\n    }\n    \n    .timetable-container {\n        margin: 0 -15px;\n    }\n    \n    .feature-card {\n        margin: 0.5rem 0;\n        padding: 1.5rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .page-header h1 {\n        font-size: 2rem;\n    }\n    \n    .dashboard-card .card-icon {\n        width: 60px;\n        height: 60px;\n    }\n    \n    .dashboard-card .card-icon i {\n        font-size: 1.5rem;\n    }\n    \n    .btn-lg {\n        padding: 10px 20px;\n        font-size: 1rem;\n    }\n}\n\n/* Dark Theme Support */\n@media (prefers-color-scheme: dark) {\n    :root {\n        --dark-color: #f8f9fa;\n        --light-color: #212529;\n    }\n    \n    body {\n        background-color: #1a1a1a;\n        color: var(--dark-color);\n    }\n    \n    .card {\n        background-color: #2d2d2d;\n        color: var(--dark-color);\n    }\n    \n    .form-control, .form-select {\n        background-color: #2d2d2d;\n        color: var(--dark-color);\n        border-color: #495057;\n    }\n    \n    .timetable-cell {\n        background: #2d2d2d;\n    }\n    \n    .subject-item {\n        background: #2d2d2d;\n        color: var(--dark-color);\n    }\n}\n\n/* Print Styles */\n@media print {\n    .navbar, .btn, .dropdown, footer {\n        display: none !important;\n    }\n    \n    .card {\n        border: 1px solid #ddd !important;\n        box-shadow: none !important;\n    }\n    \n    .timetable-table {\n        font-size: 12px;\n    }\n    \n    .timetable-table th,\n    .timetable-table td {\n        padding: 8px 4px;\n    }\n}\n\n/* New Features Styles */\n\n/* Time Display Styles */\n.time-header {\n    background-color: var(--primary-color) !important;\n    color: white !important;\n    font-weight: 600;\n    min-width: 120px;\n}\n\n.time-cell {\n    background-color: #f8f9fa !important;\n    font-weight: 600;\n    color: #495057;\n    min-width: 120px;\n    padding: 0.75rem 0.5rem;\n}\n\n/* Lab Subject Styles */\n.lab-cell {\n    background-color: #e3f2fd !important;\n    border: 3px solid #2196f3 !important;\n    color: #0d47a1;\n}\n\n.lab-indicator {\n    display: inline-block;\n    background: #2196f3;\n    color: white;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-size: 0.7rem;\n    font-weight: 600;\n    margin-top: 3px;\n}\n\n/* Multiple Sections Styles */\n.multiple-sections-container {\n    margin-top: 1rem;\n}\n\n.section-timetable {\n    background: #fff;\n    border-radius: 8px;\n    padding: 1.5rem;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n    margin-bottom: 2rem;\n}\n\n.section-title {\n    color: var(--primary-color);\n    font-weight: 700;\n    margin-bottom: 1rem;\n    padding-bottom: 0.5rem;\n    border-bottom: 2px solid #e9ecef;\n}\n\n.section-divider {\n    margin: 2rem 0;\n    border-top: 3px solid #dee2e6;\n}\n\n/* Lab Options Form Styles */\n.lab-options {\n    padding: 1rem;\n    background-color: #e3f2fd;\n    border-radius: 6px;\n    border-left: 4px solid #2196f3;\n    margin-top: 0.5rem;\n}\n\n.lab-checkbox:checked + .form-check-label {\n    color: #2196f3;\n    font-weight: 600;\n}\n\n/* College Timetable Format Styles - Exact match to the reference image */\n.college-timetable-table {\n    font-size: 0.75rem;\n    border-collapse: collapse;\n    width: 100%;\n    font-family: Arial, sans-serif;\n}\n\n.college-timetable-table th,\n.college-timetable-table td {\n    border: 1px solid #000;\n    padding: 4px;\n    text-align: center;\n    vertical-align: middle;\n    font-weight: normal;\n}\n\n.day-time-header {\n    background-color: #f0f0f0 !important;\n    font-weight: bold;\n    font-size: 0.7rem;\n    width: 80px;\n    padding: 8px 4px;\n}\n\n.day-cell {\n    background-color: #f0f0f0 !important;\n    color: #000 !important;\n    font-weight: bold;\n    font-size: 0.7rem;\n    width: 80px;\n    padding: 8px 4px;\n}\n\n.time-header {\n    background-color: #f0f0f0 !important;\n    font-weight: bold;\n    font-size: 0.65rem;\n    min-width: 70px;\n    padding: 4px 2px;\n    line-height: 1.1;\n}\n\n.break-header {\n    background-color: #f0f0f0 !important;\n    color: #000 !important;\n    font-weight: bold;\n    font-size: 0.65rem;\n    min-width: 60px;\n    padding: 4px 2px;\n}\n\n.break-cell {\n    background-color: #ffffff !important;\n    color: #000 !important;\n    font-weight: bold;\n    font-size: 0.7rem;\n}\n\n.subject-cell {\n    background-color: #ffffff !important;\n    color: #000 !important;\n    font-size: 0.65rem;\n    padding: 2px;\n    line-height: 1.2;\n    min-height: 40px;\n}\n\n.off-cell {\n    background-color: #ffffff !important;\n    color: #000 !important;\n    font-weight: bold;\n    font-size: 0.7rem;\n}\n\n/* Subject Cell Content Styles */\n.subject-code {\n    font-weight: 700;\n    font-size: 0.8rem;\n    color: #0d47a1;\n    margin-bottom: 2px;\n}\n\n.subject-name {\n    font-weight: 600;\n    font-size: 0.75rem;\n    color: #333;\n    margin-bottom: 2px;\n}\n\n.faculty-name {\n    font-size: 0.7rem;\n    color: #666;\n    font-style: italic;\n    margin-bottom: 2px;\n}\n\n.lab-indicator {\n    background: #2196f3;\n    color: white;\n    padding: 1px 4px;\n    border-radius: 2px;\n    font-size: 0.65rem;\n    font-weight: 600;\n}\n\n/* Responsive adjustments for college timetable */\n@media (max-width: 768px) {\n    .college-timetable-table {\n        font-size: 0.7rem;\n    }\n    \n    .college-timetable-table th,\n    .college-timetable-table td {\n        padding: 4px 2px;\n    }\n    \n    .subject-code {\n        font-size: 0.7rem;\n    }\n    \n    .subject-name {\n        font-size: 0.65rem;\n    }\n    \n    .faculty-name {\n        font-size: 0.6rem;\n    }\n}\n","size_bytes":15677},"static/js/auth.js":{"content":"// Authentication module for AI Timetable Generator\n\n// Initialize authentication on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeAuth();\n    setupAuthForms();\n});\n\nfunction initializeAuth() {\n    // Check if user is already logged in and on index page\n    if (window.location.pathname === '/' && isLoggedIn()) {\n        window.location.href = '/dashboard';\n        return;\n    }\n\n    // Update navbar based on auth status\n    updateNavbar();\n}\n\nfunction updateNavbar() {\n    const navbarUser = document.getElementById('navbar-user');\n    if (!navbarUser) return;\n\n    if (isLoggedIn()) {\n        const user = getCurrentUser();\n        navbarUser.innerHTML = `\n            <span class=\"navbar-text me-3\">Welcome, ${user.username}!</span>\n            <button class=\"btn btn-outline-light btn-sm\" onclick=\"logout()\">\n                <i class=\"fas fa-sign-out-alt me-1\"></i>Logout\n            </button>\n        `;\n    } else {\n        navbarUser.innerHTML = `\n            <button class=\"btn btn-outline-light btn-sm me-2\" onclick=\"showLoginForm()\">\n                <i class=\"fas fa-sign-in-alt me-1\"></i>Login\n            </button>\n            <button class=\"btn btn-light btn-sm\" onclick=\"showSignupForm()\">\n                <i class=\"fas fa-user-plus me-1\"></i>Sign Up\n            </button>\n        `;\n    }\n}\n\nfunction setupAuthForms() {\n    // Setup login form\n    const loginForm = document.getElementById('loginForm');\n    if (loginForm) {\n        loginForm.addEventListener('submit', handleLogin);\n    }\n\n    // Setup signup form\n    const signupForm = document.getElementById('signupForm');\n    if (signupForm) {\n        signupForm.addEventListener('submit', handleSignup);\n    }\n\n    // Setup password confirmation validation\n    const confirmPassword = document.getElementById('confirmPassword');\n    if (confirmPassword) {\n        confirmPassword.addEventListener('input', validatePasswordMatch);\n    }\n}\n\nfunction showLoginForm() {\n    const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));\n    const signupModal = bootstrap.Modal.getInstance(document.getElementById('signupModal'));\n    \n    if (signupModal) {\n        signupModal.hide();\n    }\n    \n    loginModal.show();\n}\n\nfunction showSignupForm() {\n    const signupModal = new bootstrap.Modal(document.getElementById('signupModal'));\n    const loginModal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));\n    \n    if (loginModal) {\n        loginModal.hide();\n    }\n    \n    signupModal.show();\n}\n\nfunction handleLogin(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    if (!validateForm(form)) {\n        return;\n    }\n\n    const email = document.getElementById('loginEmail').value.trim();\n    const password = document.getElementById('loginPassword').value;\n\n    // Validate input\n    if (!email || !password) {\n        showToast('Please fill in all fields', 'error');\n        return;\n    }\n\n    // Get users from storage\n    const users = getFromStorage('aitt-users') || [];\n    \n    // Find user by email\n    const user = users.find(u => u.email.toLowerCase() === email.toLowerCase());\n    \n    if (!user) {\n        showToast('User not found. Please check your email or sign up.', 'error');\n        return;\n    }\n\n    // Simple password verification (in production, use proper hashing)\n    if (user.password !== password) {\n        showToast('Invalid password. Please try again.', 'error');\n        return;\n    }\n\n    // Create session\n    const session = {\n        userId: user.id,\n        loginAt: new Date().toISOString(),\n        token: generateId() // Simple token generation\n    };\n\n    if (saveToStorage('aitt-session', session)) {\n        showToast('Login successful! Redirecting...', 'success');\n        \n        // Close modal and redirect\n        const modal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));\n        modal.hide();\n        \n        setTimeout(() => {\n            window.location.href = '/dashboard';\n        }, 1000);\n    } else {\n        showToast('Login failed. Please try again.', 'error');\n    }\n}\n\nfunction handleSignup(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    if (!validateForm(form)) {\n        return;\n    }\n\n    const username = document.getElementById('signupUsername').value.trim();\n    const email = document.getElementById('signupEmail').value.trim();\n    const password = document.getElementById('signupPassword').value;\n    const confirmPassword = document.getElementById('confirmPassword').value;\n\n    // Validate input\n    if (!username || !email || !password || !confirmPassword) {\n        showToast('Please fill in all fields', 'error');\n        return;\n    }\n\n    // Validate password match\n    if (password !== confirmPassword) {\n        showToast('Passwords do not match', 'error');\n        return;\n    }\n\n    // Validate password strength\n    if (password.length < 6) {\n        showToast('Password must be at least 6 characters long', 'error');\n        return;\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n        showToast('Please enter a valid email address', 'error');\n        return;\n    }\n\n    // Get existing users\n    const users = getFromStorage('aitt-users') || [];\n    \n    // Check if email already exists\n    if (users.some(u => u.email.toLowerCase() === email.toLowerCase())) {\n        showToast('Email already registered. Please use a different email or login.', 'error');\n        return;\n    }\n\n    // Check if username already exists\n    if (users.some(u => u.username.toLowerCase() === username.toLowerCase())) {\n        showToast('Username already taken. Please choose a different username.', 'error');\n        return;\n    }\n\n    // Create new user\n    const newUser = {\n        id: generateId(),\n        username: username,\n        email: email,\n        password: password, // In production, hash this password\n        createdAt: new Date().toISOString()\n    };\n\n    // Add to users array\n    users.push(newUser);\n\n    // Save to storage\n    if (saveToStorage('aitt-users', users)) {\n        showToast('Account created successfully! You can now login.', 'success');\n        \n        // Close signup modal and show login modal\n        const signupModal = bootstrap.Modal.getInstance(document.getElementById('signupModal'));\n        signupModal.hide();\n        \n        // Reset signup form\n        resetForm(form);\n        \n        // Auto-fill login form\n        setTimeout(() => {\n            document.getElementById('loginEmail').value = email;\n            showLoginForm();\n        }, 500);\n    } else {\n        showToast('Registration failed. Please try again.', 'error');\n    }\n}\n\nfunction validatePasswordMatch() {\n    const password = document.getElementById('signupPassword').value;\n    const confirmPassword = document.getElementById('confirmPassword').value;\n    const confirmField = document.getElementById('confirmPassword');\n\n    if (confirmPassword && password !== confirmPassword) {\n        confirmField.setCustomValidity('Passwords do not match');\n        confirmField.classList.add('is-invalid');\n    } else {\n        confirmField.setCustomValidity('');\n        confirmField.classList.remove('is-invalid');\n    }\n}\n\n// Password strength indicator\nfunction checkPasswordStrength(password) {\n    let strength = 0;\n    let feedback = [];\n\n    if (password.length >= 8) {\n        strength += 25;\n    } else {\n        feedback.push('At least 8 characters');\n    }\n\n    if (/[a-z]/.test(password)) {\n        strength += 25;\n    } else {\n        feedback.push('Lowercase letter');\n    }\n\n    if (/[A-Z]/.test(password)) {\n        strength += 25;\n    } else {\n        feedback.push('Uppercase letter');\n    }\n\n    if (/[0-9]/.test(password)) {\n        strength += 25;\n    } else {\n        feedback.push('Number');\n    }\n\n    return { strength, feedback };\n}\n\n// Add password strength indicator to signup form\ndocument.addEventListener('DOMContentLoaded', function() {\n    const passwordInput = document.getElementById('signupPassword');\n    if (passwordInput) {\n        // Create strength indicator\n        const strengthIndicator = document.createElement('div');\n        strengthIndicator.className = 'password-strength mt-2';\n        strengthIndicator.innerHTML = `\n            <div class=\"progress\" style=\"height: 5px;\">\n                <div class=\"progress-bar\" id=\"strengthBar\" role=\"progressbar\" style=\"width: 0%\"></div>\n            </div>\n            <small class=\"text-muted\" id=\"strengthText\">Enter a password</small>\n        `;\n        \n        passwordInput.parentNode.appendChild(strengthIndicator);\n\n        passwordInput.addEventListener('input', function() {\n            const password = this.value;\n            const { strength, feedback } = checkPasswordStrength(password);\n            \n            const progressBar = document.getElementById('strengthBar');\n            const strengthText = document.getElementById('strengthText');\n            \n            if (password.length === 0) {\n                progressBar.style.width = '0%';\n                progressBar.className = 'progress-bar';\n                strengthText.textContent = 'Enter a password';\n                return;\n            }\n            \n            progressBar.style.width = strength + '%';\n            \n            if (strength < 50) {\n                progressBar.className = 'progress-bar bg-danger';\n                strengthText.textContent = 'Weak - ' + feedback.join(', ');\n            } else if (strength < 75) {\n                progressBar.className = 'progress-bar bg-warning';\n                strengthText.textContent = 'Medium - ' + feedback.join(', ');\n            } else {\n                progressBar.className = 'progress-bar bg-success';\n                strengthText.textContent = 'Strong password';\n            }\n        });\n    }\n});\n\n// Social login placeholder (for future implementation)\nfunction initializeSocialLogin() {\n    // Placeholder for Google/Facebook login integration\n    console.log('Social login initialization placeholder');\n}\n\n// Remember me functionality\nfunction handleRememberMe(userId) {\n    const rememberCheckbox = document.getElementById('rememberMe');\n    if (rememberCheckbox && rememberCheckbox.checked) {\n        // Store user preference (simplified - in production use secure methods)\n        saveToStorage('aitt-remember', userId);\n    }\n}\n\n// Auto-login if remembered\nfunction checkRememberedUser() {\n    const rememberedUserId = getFromStorage('aitt-remember');\n    if (rememberedUserId && !isLoggedIn()) {\n        const users = getFromStorage('aitt-users') || [];\n        const user = users.find(u => u.id === rememberedUserId);\n        \n        if (user) {\n            // Auto-fill email in login form\n            const emailField = document.getElementById('loginEmail');\n            if (emailField) {\n                emailField.value = user.email;\n            }\n        }\n    }\n}\n\n// Initialize remember me check\ndocument.addEventListener('DOMContentLoaded', function() {\n    checkRememberedUser();\n});\n\n// Export authentication functions for global use\nwindow.AuthModule = {\n    showLoginForm,\n    showSignupForm,\n    handleLogin,\n    handleSignup,\n    validatePasswordMatch,\n    checkPasswordStrength\n};\n","size_bytes":11329},"static/js/common.js":{"content":"// Common utility functions and global configurations\n\n// Storage utilities\nfunction saveToStorage(key, data) {\n    try {\n        localStorage.setItem(key, JSON.stringify(data));\n        return true;\n    } catch (error) {\n        console.error('Error saving to localStorage:', error);\n        return false;\n    }\n}\n\nfunction getFromStorage(key) {\n    try {\n        const data = localStorage.getItem(key);\n        return data ? JSON.parse(data) : null;\n    } catch (error) {\n        console.error('Error reading from localStorage:', error);\n        return null;\n    }\n}\n\nfunction removeFromStorage(key) {\n    try {\n        localStorage.removeItem(key);\n        return true;\n    } catch (error) {\n        console.error('Error removing from localStorage:', error);\n        return false;\n    }\n}\n\n// Session management\nfunction getCurrentUser() {\n    const session = getFromStorage('aitt-session');\n    if (session && session.userId) {\n        const users = getFromStorage('aitt-users') || [];\n        return users.find(user => user.id === session.userId);\n    }\n    return null;\n}\n\nfunction isLoggedIn() {\n    return getCurrentUser() !== null;\n}\n\nfunction logout() {\n    removeFromStorage('aitt-session');\n    window.location.href = '/';\n}\n\n// Check authentication on protected pages\nfunction requireAuth() {\n    if (!isLoggedIn()) {\n        window.location.href = '/';\n        return false;\n    }\n    return true;\n}\n\n// Generate unique ID\nfunction generateId() {\n    return 'aitt_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n}\n\n// Format date and time\nfunction formatDateTime(dateString) {\n    const date = new Date(dateString);\n    return {\n        date: date.toLocaleDateString(),\n        time: date.toLocaleTimeString(),\n        full: date.toLocaleString()\n    };\n}\n\n// Toast notification system\nfunction showToast(message, type = 'info', duration = 3000) {\n    // Remove existing toasts\n    const existingToasts = document.querySelectorAll('.toast');\n    existingToasts.forEach(toast => toast.remove());\n\n    // Create toast container if it doesn't exist\n    let container = document.querySelector('.toast-container');\n    if (!container) {\n        container = document.createElement('div');\n        container.className = 'toast-container';\n        document.body.appendChild(container);\n    }\n\n    // Create toast element\n    const toast = document.createElement('div');\n    toast.className = `toast ${type} show`;\n    toast.innerHTML = `\n        <div class=\"d-flex align-items-center p-3\">\n            <div class=\"me-2\">\n                ${getToastIcon(type)}\n            </div>\n            <div class=\"flex-grow-1\">\n                ${message}\n            </div>\n            <button type=\"button\" class=\"btn-close btn-close-white ms-2\" onclick=\"this.parentElement.parentElement.remove()\"></button>\n        </div>\n    `;\n\n    container.appendChild(toast);\n\n    // Auto remove after duration\n    setTimeout(() => {\n        if (toast.parentNode) {\n            toast.remove();\n        }\n    }, duration);\n}\n\nfunction getToastIcon(type) {\n    const icons = {\n        success: '<i class=\"fas fa-check-circle\"></i>',\n        error: '<i class=\"fas fa-exclamation-circle\"></i>',\n        warning: '<i class=\"fas fa-exclamation-triangle\"></i>',\n        info: '<i class=\"fas fa-info-circle\"></i>'\n    };\n    return icons[type] || icons.info;\n}\n\n// Form validation utilities\nfunction validateForm(form) {\n    if (!form.checkValidity()) {\n        form.classList.add('was-validated');\n        return false;\n    }\n    return true;\n}\n\nfunction resetForm(form) {\n    form.reset();\n    form.classList.remove('was-validated');\n}\n\n// Loading state management\nfunction setLoadingState(button, loading = true) {\n    if (loading) {\n        button.disabled = true;\n        button.innerHTML = button.innerHTML.replace(/(<i[^>]*><\\/i>\\s*)/g, '') + ' <span class=\"loading-spinner\"></span>';\n    } else {\n        button.disabled = false;\n        button.innerHTML = button.innerHTML.replace(/\\s*<span class=\"loading-spinner\"><\\/span>/g, '');\n    }\n}\n\n// Export utilities\nfunction exportTimetableData(data, format) {\n    const endpoint = format === 'pdf' ? '/export/pdf' : '/export/excel';\n    \n    // Show loading state\n    const exportButtons = document.querySelectorAll(`[onclick*=\"export\"][onclick*=\"${format}\"]`);\n    exportButtons.forEach(btn => setLoadingState(btn, true));\n\n    fetch(endpoint, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error('Export failed');\n        }\n        return response.blob();\n    })\n    .then(blob => {\n        // Create download link\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `timetable_${Date.now()}.${format === 'pdf' ? 'pdf' : 'xlsx'}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n        \n        showToast(`Timetable exported as ${format.toUpperCase()} successfully!`, 'success');\n    })\n    .catch(error => {\n        console.error('Export error:', error);\n        showToast('Failed to export timetable. Please try again.', 'error');\n    })\n    .finally(() => {\n        // Remove loading state\n        exportButtons.forEach(btn => setLoadingState(btn, false));\n    });\n}\n\n// Timetable HTML generation\nfunction generateTimetableHTML(data) {\n    const { timetableGrid, workingDays, maxHoursPerDay } = data;\n    \n    if (!timetableGrid || timetableGrid.length === 0) {\n        return '<div class=\"text-center text-muted py-4\">No timetable data available</div>';\n    }\n\n    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n    const displayDays = days.slice(0, workingDays);\n\n    let html = `\n        <div class=\"timetable-container\">\n            <table class=\"table table-bordered timetable-table mb-0\">\n                <thead>\n                    <tr>\n                        <th style=\"min-width: 120px;\">Time</th>\n    `;\n\n    displayDays.forEach(day => {\n        html += `<th style=\"min-width: 150px;\">${day}</th>`;\n    });\n\n    html += `\n                    </tr>\n                </thead>\n                <tbody>\n    `;\n\n    timetableGrid.forEach((row, periodIndex) => {\n        html += `<tr><td class=\"fw-bold\">Period ${periodIndex + 1}</td>`;\n        \n        row.slice(0, workingDays).forEach(cell => {\n            let cellClass = 'timetable-cell';\n            let cellContent = '';\n            \n            if (cell.isBreak) {\n                cellClass += ' break-cell';\n                cellContent = '<div class=\"fw-bold\">BREAK</div>';\n            } else if (cell.subject) {\n                cellClass += ' subject-cell';\n                cellContent = `\n                    <div class=\"subject-name\">${cell.subject}</div>\n                    <div class=\"teacher-name\">${cell.teacher || 'TBA'}</div>\n                `;\n            } else {\n                cellClass += ' free-cell';\n                cellContent = '<div class=\"fw-bold\">Free</div>';\n            }\n            \n            html += `<td><div class=\"${cellClass}\">${cellContent}</div></td>`;\n        });\n        \n        html += '</tr>';\n    });\n\n    html += `\n                </tbody>\n            </table>\n        </div>\n    `;\n\n    return html;\n}\n\n// Subject management utilities\nfunction getSubjectsFromStorage() {\n    return getFromStorage('aitt-subjects-teachers') || [];\n}\n\nfunction saveSubjectsToStorage(subjects) {\n    return saveToStorage('aitt-subjects-teachers', subjects);\n}\n\n// History management utilities\nfunction saveTimetableToHistory(title, data) {\n    const history = getFromStorage('aitt-history') || [];\n    const newEntry = {\n        id: generateId(),\n        title: title,\n        createdAt: new Date().toISOString(),\n        data: data\n    };\n    \n    history.push(newEntry);\n    return saveToStorage('aitt-history', history);\n}\n\n// Initialize common features when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Check if we're on a protected page and require authentication\n    const protectedPages = ['/dashboard', '/timetable', '/manage', '/history'];\n    const currentPath = window.location.pathname;\n    \n    if (protectedPages.some(page => currentPath.includes(page))) {\n        if (!requireAuth()) {\n            return;\n        }\n        \n        // Update user greeting if element exists\n        const userGreeting = document.getElementById('user-greeting');\n        if (userGreeting) {\n            const user = getCurrentUser();\n            if (user) {\n                userGreeting.textContent = `Welcome, ${user.username}!`;\n            }\n        }\n    }\n\n    // Add smooth scrolling to all anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth'\n                });\n            }\n        });\n    });\n\n    // Add loading states to forms\n    document.querySelectorAll('form').forEach(form => {\n        form.addEventListener('submit', function(e) {\n            const submitButton = form.querySelector('button[type=\"submit\"]');\n            if (submitButton && validateForm(form)) {\n                setLoadingState(submitButton, true);\n                \n                // Reset loading state after a delay (for better UX)\n                setTimeout(() => {\n                    setLoadingState(submitButton, false);\n                }, 2000);\n            }\n        });\n    });\n\n    // Add hover effects to cards\n    document.querySelectorAll('.card, .dashboard-card').forEach(card => {\n        card.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-5px)';\n        });\n        \n        card.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0)';\n        });\n    });\n});\n\n// Error handling\nwindow.addEventListener('error', function(e) {\n    console.error('Global error:', e.error);\n    showToast('An unexpected error occurred. Please refresh the page.', 'error');\n});\n\nwindow.addEventListener('unhandledrejection', function(e) {\n    console.error('Unhandled promise rejection:', e.reason);\n    showToast('An unexpected error occurred. Please try again.', 'error');\n});\n\n// Export common utilities for use in other modules\nwindow.CommonUtils = {\n    saveToStorage,\n    getFromStorage,\n    removeFromStorage,\n    getCurrentUser,\n    isLoggedIn,\n    logout,\n    generateId,\n    formatDateTime,\n    showToast,\n    validateForm,\n    resetForm,\n    setLoadingState,\n    exportTimetableData,\n    generateTimetableHTML,\n    getSubjectsFromStorage,\n    saveSubjectsToStorage,\n    saveTimetableToHistory\n};\n","size_bytes":11026},"static/js/dashboard.js":{"content":"// Dashboard module for AI Timetable Generator\n\n// Initialize dashboard on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (!requireAuth()) return;\n    \n    initializeDashboard();\n    loadRecentActivity();\n    setupEventListeners();\n});\n\nfunction initializeDashboard() {\n    const user = getCurrentUser();\n    if (user) {\n        // Update user greeting\n        const userGreeting = document.getElementById('user-greeting');\n        if (userGreeting) {\n            userGreeting.textContent = `Welcome, ${user.username}!`;\n        }\n    }\n\n    // Add animation delays to cards\n    const cards = document.querySelectorAll('.dashboard-card');\n    cards.forEach((card, index) => {\n        card.style.animationDelay = `${index * 0.1}s`;\n    });\n}\n\nfunction setupEventListeners() {\n    // Add click handlers for dashboard cards\n    const cards = document.querySelectorAll('.dashboard-card');\n    cards.forEach(card => {\n        card.addEventListener('click', function(e) {\n            if (e.target.tagName === 'A' || e.target.tagName === 'BUTTON') {\n                return; // Let the actual link/button handle the click\n            }\n            \n            const link = card.querySelector('a, button');\n            if (link) {\n                link.click();\n            }\n        });\n    });\n}\n\nfunction loadRecentActivity() {\n    const container = document.getElementById('recent-activity');\n    if (!container) return;\n\n    const history = getFromStorage('aitt-history') || [];\n    const subjects = getFromStorage('aitt-subjects-teachers') || [];\n    \n    // Combine and sort all activities\n    const activities = [];\n    \n    // Add timetable history\n    history.forEach(item => {\n        activities.push({\n            type: 'timetable',\n            title: item.title,\n            date: item.createdAt,\n            icon: 'fas fa-calendar-alt',\n            color: 'primary',\n            data: item\n        });\n    });\n    \n    // Add recent subjects (simulate creation dates if not available)\n    subjects.slice(0, 5).forEach(subject => {\n        activities.push({\n            type: 'subject',\n            title: `Added ${subject.subjectName}`,\n            date: subject.createdAt || new Date().toISOString(),\n            icon: 'fas fa-book',\n            color: 'success',\n            data: subject\n        });\n    });\n    \n    // Sort by date (newest first)\n    activities.sort((a, b) => new Date(b.date) - new Date(a.date));\n    \n    // Take only recent 5 activities\n    const recentActivities = activities.slice(0, 5);\n    \n    if (recentActivities.length === 0) {\n        container.innerHTML = `\n            <div class=\"text-center text-muted py-4\">\n                <i class=\"fas fa-clock fa-2x mb-3\"></i>\n                <p>No recent activity found.</p>\n                <p>Start by creating a timetable or managing subjects.</p>\n            </div>\n        `;\n        return;\n    }\n    \n    let html = '<div class=\"list-group list-group-flush\">';\n    \n    recentActivities.forEach((activity, index) => {\n        const formatted = formatDateTime(activity.date);\n        \n        html += `\n            <div class=\"list-group-item border-0 px-0 animate-slide-up\" style=\"animation-delay: ${index * 0.1}s\">\n                <div class=\"d-flex align-items-center\">\n                    <div class=\"flex-shrink-0 me-3\">\n                        <div class=\"icon-circle bg-${activity.color}\">\n                            <i class=\"${activity.icon} text-white\"></i>\n                        </div>\n                    </div>\n                    <div class=\"flex-grow-1\">\n                        <h6 class=\"mb-1\">${activity.title}</h6>\n                        <small class=\"text-muted\">\n                            <i class=\"fas fa-clock me-1\"></i>${formatted.full}\n                        </small>\n                    </div>\n                    <div class=\"flex-shrink-0\">\n                        ${getActivityActionButton(activity)}\n                    </div>\n                </div>\n            </div>\n        `;\n    });\n    \n    html += '</div>';\n    container.innerHTML = html;\n}\n\nfunction getActivityActionButton(activity) {\n    switch (activity.type) {\n        case 'timetable':\n            return `\n                <button class=\"btn btn-outline-primary btn-sm\" onclick=\"viewTimetableFromDashboard('${activity.data.id}')\">\n                    <i class=\"fas fa-eye\"></i>\n                </button>\n            `;\n        case 'subject':\n            return `\n                <button class=\"btn btn-outline-success btn-sm\" onclick=\"window.location.href='/manage'\">\n                    <i class=\"fas fa-edit\"></i>\n                </button>\n            `;\n        default:\n            return '';\n    }\n}\n\nfunction viewTimetableFromDashboard(id) {\n    // Redirect to history page with specific timetable\n    window.location.href = `/history?view=${id}`;\n}\n\nfunction exportLatest(format) {\n    const history = getFromStorage('aitt-history') || [];\n    \n    if (history.length === 0) {\n        showToast('No timetables found to export', 'warning');\n        return;\n    }\n    \n    // Get the latest timetable\n    const latest = history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))[0];\n    \n    exportTimetableData(latest.data, format);\n}\n\nfunction showStats() {\n    const modal = new bootstrap.Modal(document.getElementById('statsModal'));\n    generateStatistics();\n    modal.show();\n}\n\nfunction generateStatistics() {\n    const container = document.getElementById('stats-content');\n    if (!container) return;\n    \n    const history = getFromStorage('aitt-history') || [];\n    const subjects = getFromStorage('aitt-subjects-teachers') || [];\n    const users = getFromStorage('aitt-users') || [];\n    \n    // Calculate statistics\n    const stats = {\n        totalTimetables: history.length,\n        totalSubjects: subjects.length,\n        totalTeachers: [...new Set(subjects.flatMap(s => s.teacherNames || []))].length,\n        totalUsers: users.length,\n        coursesManaged: [...new Set(subjects.map(s => s.courseName).filter(Boolean))].length,\n        classesManaged: [...new Set(subjects.map(s => s.className).filter(Boolean))].length\n    };\n    \n    // Recent activity stats\n    const today = new Date();\n    const thisWeek = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const thisMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    \n    const weeklyTimetables = history.filter(h => new Date(h.createdAt) >= thisWeek).length;\n    const monthlyTimetables = history.filter(h => new Date(h.createdAt) >= thisMonth).length;\n    \n    // Most used courses and subjects\n    const courseUsage = {};\n    const subjectUsage = {};\n    \n    history.forEach(h => {\n        const course = h.data.courseName;\n        if (course) {\n            courseUsage[course] = (courseUsage[course] || 0) + 1;\n        }\n    });\n    \n    subjects.forEach(s => {\n        const subject = s.subjectName;\n        if (subject) {\n            subjectUsage[subject] = (subjectUsage[subject] || 0) + 1;\n        }\n    });\n    \n    const topCourse = Object.keys(courseUsage).sort((a, b) => courseUsage[b] - courseUsage[a])[0];\n    const topSubject = Object.keys(subjectUsage).sort((a, b) => subjectUsage[b] - subjectUsage[a])[0];\n    \n    // Generate HTML\n    container.innerHTML = `\n        <div class=\"row g-4\">\n            <div class=\"col-md-6\">\n                <div class=\"card bg-primary text-white\">\n                    <div class=\"card-body text-center\">\n                        <i class=\"fas fa-calendar-alt fa-2x mb-3\"></i>\n                        <h3 class=\"mb-1\">${stats.totalTimetables}</h3>\n                        <p class=\"mb-0\">Total Timetables</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card bg-success text-white\">\n                    <div class=\"card-body text-center\">\n                        <i class=\"fas fa-book fa-2x mb-3\"></i>\n                        <h3 class=\"mb-1\">${stats.totalSubjects}</h3>\n                        <p class=\"mb-0\">Total Subjects</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card bg-info text-white\">\n                    <div class=\"card-body text-center\">\n                        <i class=\"fas fa-chalkboard-teacher fa-2x mb-3\"></i>\n                        <h3 class=\"mb-1\">${stats.totalTeachers}</h3>\n                        <p class=\"mb-0\">Total Teachers</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card bg-warning text-dark\">\n                    <div class=\"card-body text-center\">\n                        <i class=\"fas fa-graduation-cap fa-2x mb-3\"></i>\n                        <h3 class=\"mb-1\">${stats.coursesManaged}</h3>\n                        <p class=\"mb-0\">Courses Managed</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"row mt-4\">\n            <div class=\"col-md-6\">\n                <h5><i class=\"fas fa-chart-line me-2\"></i>Activity Overview</h5>\n                <ul class=\"list-group\">\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        This Week\n                        <span class=\"badge bg-primary rounded-pill\">${weeklyTimetables}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        This Month\n                        <span class=\"badge bg-success rounded-pill\">${monthlyTimetables}</span>\n                    </li>\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        Total Classes\n                        <span class=\"badge bg-info rounded-pill\">${stats.classesManaged}</span>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"col-md-6\">\n                <h5><i class=\"fas fa-star me-2\"></i>Top Usage</h5>\n                <ul class=\"list-group\">\n                    <li class=\"list-group-item\">\n                        <strong>Most Used Course:</strong><br>\n                        <span class=\"text-muted\">${topCourse || 'N/A'}</span>\n                    </li>\n                    <li class=\"list-group-item\">\n                        <strong>Most Added Subject:</strong><br>\n                        <span class=\"text-muted\">${topSubject || 'N/A'}</span>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        \n        ${stats.totalTimetables === 0 ? `\n            <div class=\"alert alert-info mt-4\">\n                <i class=\"fas fa-info-circle me-2\"></i>\n                <strong>Get Started:</strong> Create your first timetable to see more detailed statistics.\n            </div>\n        ` : ''}\n    `;\n}\n\n// Quick actions from dashboard\nfunction quickCreateTimetable(type) {\n    window.location.href = type === 'course' ? '/timetable/course' : '/timetable/class';\n}\n\nfunction quickManageSubjects() {\n    window.location.href = '/manage';\n}\n\nfunction quickViewHistory() {\n    window.location.href = '/history';\n}\n\n// Dashboard refresh functionality\nfunction refreshDashboard() {\n    showToast('Refreshing dashboard...', 'info');\n    \n    setTimeout(() => {\n        loadRecentActivity();\n        showToast('Dashboard refreshed successfully!', 'success');\n    }, 1000);\n}\n\n// Add refresh button functionality\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Add keyboard shortcuts\n    document.addEventListener('keydown', function(e) {\n        // Ctrl+R or F5 to refresh dashboard\n        if ((e.ctrlKey && e.key === 'r') || e.key === 'F5') {\n            e.preventDefault();\n            refreshDashboard();\n        }\n        \n        // Quick navigation shortcuts\n        if (e.ctrlKey) {\n            switch (e.key) {\n                case '1':\n                    e.preventDefault();\n                    window.location.href = '/timetable/course';\n                    break;\n                case '2':\n                    e.preventDefault();\n                    window.location.href = '/timetable/class';\n                    break;\n                case '3':\n                    e.preventDefault();\n                    window.location.href = '/manage';\n                    break;\n                case '4':\n                    e.preventDefault();\n                    window.location.href = '/history';\n                    break;\n            }\n        }\n    });\n});\n\n// Export dashboard functions\nwindow.DashboardModule = {\n    loadRecentActivity,\n    showStats,\n    exportLatest,\n    refreshDashboard,\n    quickCreateTimetable,\n    quickManageSubjects,\n    quickViewHistory\n};\n","size_bytes":12844},"static/js/generator.js":{"content":"// Timetable Generator module for AI Timetable Generator\n\nlet generatorType = 'course'; // 'course' or 'class'\nlet currentTimetableData = null;\n\n// Initialize generator based on type\nfunction initializeGenerator(type) {\n    if (!requireAuth()) return;\n    \n    generatorType = type;\n    setupGeneratorForm();\n    loadSavedSubjects();\n    setupBreakToggle();\n    addInitialSubject();\n}\n\nfunction setupGeneratorForm() {\n    const formId = generatorType === 'course' ? 'courseForm' : 'classForm';\n    const form = document.getElementById(formId);\n    \n    if (form) {\n        form.addEventListener('submit', handleTimetableGeneration);\n    }\n}\n\nfunction setupBreakToggle() {\n    const breakEnabled = document.getElementById('breakEnabled');\n    const breakOptions = document.getElementById('breakOptions');\n    \n    if (breakEnabled && breakOptions) {\n        breakEnabled.addEventListener('change', function() {\n            breakOptions.style.display = this.checked ? 'block' : 'none';\n        });\n        \n        // Initial state\n        breakOptions.style.display = breakEnabled.checked ? 'block' : 'none';\n    }\n}\n\nfunction addSubject() {\n    const container = document.getElementById('subjectsList');\n    const subjectCount = container.children.length;\n    \n    const subjectDiv = document.createElement('div');\n    subjectDiv.className = 'subject-item mb-3 p-3 border rounded animate-slide-up';\n    subjectDiv.innerHTML = `\n        <div class=\"d-flex justify-content-between align-items-center mb-2\">\n            <h6 class=\"mb-0\">Subject ${subjectCount + 1}</h6>\n            <button type=\"button\" class=\"btn btn-outline-danger btn-sm\" onclick=\"removeSubject(this)\">\n                <i class=\"fas fa-trash\"></i>\n            </button>\n        </div>\n        \n        <div class=\"row g-2\">\n            <div class=\"col-md-6\">\n                <label class=\"form-label\">Subject Code</label>\n                <input type=\"text\" class=\"form-control subject-code\" placeholder=\"e.g., CS101\" required>\n            </div>\n            <div class=\"col-md-6\">\n                <label class=\"form-label\">Subject Name</label>\n                <input type=\"text\" class=\"form-control subject-name\" placeholder=\"e.g., Data Structures\" required>\n            </div>\n        </div>\n        \n        <div class=\"mt-2\">\n            <label class=\"form-label\">Teachers</label>\n            <div class=\"teachers-list\">\n                <div class=\"input-group mb-2\">\n                    <input type=\"text\" class=\"form-control teacher-input\" placeholder=\"Teacher Name\" required>\n                    <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeTeacher(this)\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                </div>\n            </div>\n            <button type=\"button\" class=\"btn btn-outline-primary btn-sm\" onclick=\"addTeacherToSubject(this)\">\n                <i class=\"fas fa-plus me-1\"></i>Add Teacher\n            </button>\n        </div>\n        \n        <div class=\"row g-2 mt-2\">\n            <div class=\"col-md-12\">\n                <label class=\"form-label\">Priority</label>\n                <select class=\"form-select subject-priority\">\n                    <option value=\"normal\" selected>Normal</option>\n                    <option value=\"high\">High</option>\n                    <option value=\"low\">Low</option>\n                </select>\n                <div class=\"form-text\">Lectures per week will be automatically calculated based on working days and lectures per day</div>\n            </div>\n        </div>\n        \n        <div class=\"mt-3\">\n            <div class=\"form-check form-switch\">\n                <input class=\"form-check-input lab-checkbox\" type=\"checkbox\" onchange=\"toggleLabOptions(this)\">\n                <label class=\"form-check-label\">Lab Subject</label>\n            </div>\n            \n            <div class=\"lab-options mt-2\" style=\"display: none;\">\n                <label class=\"form-label\">Lab Duration</label>\n                <select class=\"form-select lab-duration\">\n                    <option value=\"regular\" selected>Regular Duration (same as lecture)</option>\n                    <option value=\"double\">Lab Duration (2 consecutive periods)</option>\n                </select>\n                <div class=\"form-text\">Lab duration will automatically block 2 consecutive periods in timetable</div>\n            </div>\n        </div>\n    `;\n    \n    container.appendChild(subjectDiv);\n}\n\nfunction addInitialSubject() {\n    const container = document.getElementById('subjectsList');\n    if (container && container.children.length === 0) {\n        addSubject();\n    }\n}\n\nfunction removeSubject(button) {\n    const subjectDiv = button.closest('.subject-item');\n    subjectDiv.style.animation = 'slideUp 0.3s ease-out reverse';\n    setTimeout(() => {\n        subjectDiv.remove();\n        updateSubjectNumbers();\n    }, 300);\n}\n\nfunction updateSubjectNumbers() {\n    const subjects = document.querySelectorAll('.subject-item h6');\n    subjects.forEach((header, index) => {\n        header.textContent = `Subject ${index + 1}`;\n    });\n}\n\nfunction addTeacherToSubject(button) {\n    const teachersList = button.previousElementSibling;\n    const newTeacher = document.createElement('div');\n    newTeacher.className = 'input-group mb-2';\n    newTeacher.innerHTML = `\n        <input type=\"text\" class=\"form-control teacher-input\" placeholder=\"Teacher Name\" required>\n        <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeTeacher(this)\">\n            <i class=\"fas fa-trash\"></i>\n        </button>\n    `;\n    teachersList.appendChild(newTeacher);\n}\n\nfunction removeTeacher(button) {\n    const teacherDiv = button.closest('.input-group');\n    const teachersList = teacherDiv.parentNode;\n    \n    // Don't allow removing the last teacher\n    if (teachersList.children.length <= 1) {\n        showToast('At least one teacher is required for each subject', 'warning');\n        return;\n    }\n    \n    teacherDiv.remove();\n}\n\nfunction toggleLabOptions(checkbox) {\n    const labOptions = checkbox.closest('.subject-item').querySelector('.lab-options');\n    labOptions.style.display = checkbox.checked ? 'block' : 'none';\n}\n\nfunction loadSavedSubjects() {\n    const subjects = getSubjectsFromStorage();\n    if (subjects.length === 0) return;\n    \n    // Group subjects by course and class for easy selection\n    const groupedSubjects = {};\n    subjects.forEach(subject => {\n        const key = `${subject.courseName} - ${subject.className}`;\n        if (!groupedSubjects[key]) {\n            groupedSubjects[key] = [];\n        }\n        groupedSubjects[key].push(subject);\n    });\n    \n    // Add a \"Load Saved Subjects\" button if there are saved subjects\n    const container = document.getElementById('subjectsList');\n    if (container) {\n        const loadButton = document.createElement('div');\n        loadButton.className = 'mb-3';\n        loadButton.innerHTML = `\n            <button type=\"button\" class=\"btn btn-outline-info w-100\" onclick=\"showLoadSubjectsModal()\">\n                <i class=\"fas fa-download me-2\"></i>Load Saved Subjects\n            </button>\n        `;\n        container.parentNode.insertBefore(loadButton, container);\n    }\n}\n\nfunction showLoadSubjectsModal() {\n    const subjects = getSubjectsFromStorage();\n    if (subjects.length === 0) {\n        showToast('No saved subjects found', 'info');\n        return;\n    }\n    \n    // Create and show modal\n    const modal = document.createElement('div');\n    modal.className = 'modal fade';\n    modal.innerHTML = `\n        <div class=\"modal-dialog modal-lg\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h5 class=\"modal-title\">\n                        <i class=\"fas fa-download me-2\"></i>Load Saved Subjects\n                    </h5>\n                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                </div>\n                <div class=\"modal-body\">\n                    <div class=\"mb-3\">\n                        <input type=\"text\" class=\"form-control\" id=\"subjectSearchInput\" \n                               placeholder=\"Search subjects...\" onkeyup=\"filterLoadableSubjects()\">\n                    </div>\n                    <div id=\"loadableSubjectsList\" class=\"max-height-400 overflow-auto\">\n                        ${generateLoadableSubjectsList(subjects)}\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"loadSelectedSubjects()\">\n                        <i class=\"fas fa-check me-2\"></i>Load Selected\n                    </button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    document.body.appendChild(modal);\n    const bsModal = new bootstrap.Modal(modal);\n    bsModal.show();\n    \n    // Remove modal from DOM when hidden\n    modal.addEventListener('hidden.bs.modal', () => {\n        modal.remove();\n    });\n}\n\nfunction generateLoadableSubjectsList(subjects) {\n    let html = '';\n    subjects.forEach(subject => {\n        html += `\n            <div class=\"card mb-2 loadable-subject\">\n                <div class=\"card-body p-3\">\n                    <div class=\"form-check\">\n                        <input class=\"form-check-input\" type=\"checkbox\" value=\"${subject.id}\" id=\"load_${subject.id}\">\n                        <label class=\"form-check-label w-100\" for=\"load_${subject.id}\">\n                            <div class=\"d-flex justify-content-between align-items-start\">\n                                <div>\n                                    <h6 class=\"mb-1\">${subject.subjectName}</h6>\n                                    <small class=\"text-muted\">${subject.subjectCode}</small>\n                                    <br>\n                                    <small class=\"text-primary\">${subject.courseName} - ${subject.className}</small>\n                                </div>\n                                <div class=\"text-end\">\n                                    <small class=\"text-muted\">Teachers: ${subject.teacherNames?.length || 0}</small>\n                                </div>\n                            </div>\n                        </label>\n                    </div>\n                </div>\n            </div>\n        `;\n    });\n    return html;\n}\n\nfunction filterLoadableSubjects() {\n    const searchTerm = document.getElementById('subjectSearchInput').value.toLowerCase();\n    const subjects = document.querySelectorAll('.loadable-subject');\n    \n    subjects.forEach(subject => {\n        const text = subject.textContent.toLowerCase();\n        subject.style.display = text.includes(searchTerm) ? 'block' : 'none';\n    });\n}\n\nfunction loadSelectedSubjects() {\n    const checkboxes = document.querySelectorAll('#loadableSubjectsList input[type=\"checkbox\"]:checked');\n    if (checkboxes.length === 0) {\n        showToast('Please select at least one subject', 'warning');\n        return;\n    }\n    \n    const subjects = getSubjectsFromStorage();\n    const container = document.getElementById('subjectsList');\n    \n    // Clear existing subjects\n    container.innerHTML = '';\n    \n    checkboxes.forEach(checkbox => {\n        const subjectId = checkbox.value;\n        const subject = subjects.find(s => s.id === subjectId);\n        \n        if (subject) {\n            addSubjectFromData(subject);\n        }\n    });\n    \n    // Close modal\n    const modal = bootstrap.Modal.getInstance(document.querySelector('.modal.show'));\n    modal.hide();\n    \n    showToast(`${checkboxes.length} subject(s) loaded successfully!`, 'success');\n}\n\nfunction addSubjectFromData(subjectData) {\n    const container = document.getElementById('subjectsList');\n    const subjectCount = container.children.length;\n    \n    const subjectDiv = document.createElement('div');\n    subjectDiv.className = 'subject-item mb-3 p-3 border rounded animate-slide-up';\n    \n    let teachersHtml = '';\n    (subjectData.teacherNames || []).forEach(teacher => {\n        teachersHtml += `\n            <div class=\"input-group mb-2\">\n                <input type=\"text\" class=\"form-control teacher-input\" value=\"${teacher}\" required>\n                <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeTeacher(this)\">\n                    <i class=\"fas fa-trash\"></i>\n                </button>\n            </div>\n        `;\n    });\n    \n    if (!teachersHtml) {\n        teachersHtml = `\n            <div class=\"input-group mb-2\">\n                <input type=\"text\" class=\"form-control teacher-input\" placeholder=\"Teacher Name\" required>\n                <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeTeacher(this)\">\n                    <i class=\"fas fa-trash\"></i>\n                </button>\n            </div>\n        `;\n    }\n    \n    subjectDiv.innerHTML = `\n        <div class=\"d-flex justify-content-between align-items-center mb-2\">\n            <h6 class=\"mb-0\">Subject ${subjectCount + 1}</h6>\n            <button type=\"button\" class=\"btn btn-outline-danger btn-sm\" onclick=\"removeSubject(this)\">\n                <i class=\"fas fa-trash\"></i>\n            </button>\n        </div>\n        \n        <div class=\"row g-2\">\n            <div class=\"col-md-6\">\n                <label class=\"form-label\">Subject Code</label>\n                <input type=\"text\" class=\"form-control subject-code\" value=\"${subjectData.subjectCode || ''}\" required>\n            </div>\n            <div class=\"col-md-6\">\n                <label class=\"form-label\">Subject Name</label>\n                <input type=\"text\" class=\"form-control subject-name\" value=\"${subjectData.subjectName || ''}\" required>\n            </div>\n        </div>\n        \n        <div class=\"mt-2\">\n            <label class=\"form-label\">Teachers</label>\n            <div class=\"teachers-list\">\n                ${teachersHtml}\n            </div>\n            <button type=\"button\" class=\"btn btn-outline-primary btn-sm\" onclick=\"addTeacherToSubject(this)\">\n                <i class=\"fas fa-plus me-1\"></i>Add Teacher\n            </button>\n        </div>\n        \n        <div class=\"row g-2 mt-2\">\n            <div class=\"col-md-12\">\n                <label class=\"form-label\">Priority</label>\n                <select class=\"form-select subject-priority\">\n                    <option value=\"normal\" selected>Normal</option>\n                    <option value=\"high\">High</option>\n                    <option value=\"low\">Low</option>\n                </select>\n                <div class=\"form-text\">Lectures per week will be automatically calculated based on working days and lectures per day</div>\n            </div>\n        </div>\n        \n        <div class=\"mt-3\">\n            <div class=\"form-check form-switch\">\n                <input class=\"form-check-input lab-checkbox\" type=\"checkbox\" onchange=\"toggleLabOptions(this)\">\n                <label class=\"form-check-label\">Lab Subject</label>\n            </div>\n            \n            <div class=\"lab-options mt-2\" style=\"display: none;\">\n                <label class=\"form-label\">Lab Duration</label>\n                <select class=\"form-select lab-duration\">\n                    <option value=\"regular\" selected>Regular Duration (same as lecture)</option>\n                    <option value=\"double\">Lab Duration (2 consecutive periods)</option>\n                </select>\n                <div class=\"form-text\">Lab duration will automatically block 2 consecutive periods in timetable</div>\n            </div>\n        </div>\n    `;\n    \n    container.appendChild(subjectDiv);\n}\n\nfunction handleTimetableGeneration(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    if (!validateForm(form)) {\n        return;\n    }\n    \n    // Show loading state\n    const submitButton = form.querySelector('button[type=\"submit\"]');\n    setLoadingState(submitButton, true);\n    \n    try {\n        const formData = collectFormData();\n        if (!formData) {\n            setLoadingState(submitButton, false);\n            return;\n        }\n        \n        if (formData.numberOfSections && formData.numberOfSections > 1) {\n            // Generate timetables for multiple sections\n            const sectionTimetables = generateMultipleSectionTimetables(formData);\n            if (sectionTimetables) {\n                displayMultipleSectionTimetables(sectionTimetables);\n                saveTimetableToHistory(`${formData.courseName} - ${formData.className} (${formData.numberOfSections} sections)`, sectionTimetables);\n                showToast(`Timetables generated successfully for ${formData.numberOfSections} sections!`, 'success');\n            } else {\n                showToast('Failed to generate timetables for all sections. Please check your constraints.', 'error');\n            }\n        } else {\n            // Generate single timetable\n            const timetable = generateTimetable(formData);\n            if (timetable) {\n                displayTimetable(timetable);\n                saveTimetableToHistory(`${formData.courseName} - ${formData.className}`, timetable);\n                showToast('Timetable generated successfully!', 'success');\n            } else {\n                showToast('Failed to generate timetable. Please check your constraints.', 'error');\n            }\n        }\n    } catch (error) {\n        console.error('Timetable generation error:', error);\n        showToast('An error occurred while generating the timetable.', 'error');\n    } finally {\n        setLoadingState(submitButton, false);\n    }\n}\n\nfunction collectFormData() {\n    const courseName = document.getElementById('courseName').value.trim();\n    const className = document.getElementById('className').value.trim();\n    const sectionName = document.getElementById('sectionName')?.value.trim() || '';\n    const numberOfSections = parseInt(document.getElementById('numberOfSections')?.value || 1);\n    const workingDays = parseInt(document.getElementById('workingDays').value);\n    const maxHoursPerDay = parseInt(document.getElementById('maxHoursPerDay').value);\n    const freeLectures = parseInt(document.getElementById('freeLectures').value);\n    const breakEnabled = document.getElementById('breakEnabled').checked;\n    const breakStart = breakEnabled ? parseInt(document.getElementById('breakStart').value) : null;\n    const breakDurationMinutes = breakEnabled ? parseInt(document.getElementById('breakDuration').value) : null;\n    const startTime = document.getElementById('startTime').value;\n    const lectureDuration = parseInt(document.getElementById('lectureDuration').value);\n    \n    // Collect subjects\n    const subjects = [];\n    const subjectItems = document.querySelectorAll('.subject-item');\n    \n    if (subjectItems.length === 0) {\n        showToast('Please add at least one subject', 'error');\n        return null;\n    }\n    \n    for (const item of subjectItems) {\n        const subjectCode = item.querySelector('.subject-code').value.trim();\n        const subjectName = item.querySelector('.subject-name').value.trim();\n        // Remove this line - lectures per week will be calculated automatically\n        const priority = item.querySelector('.subject-priority').value;\n        const isLab = item.querySelector('.lab-checkbox').checked;\n        const labDuration = isLab ? item.querySelector('.lab-duration').value : 'regular';\n        \n        const teacherInputs = item.querySelectorAll('.teacher-input');\n        const teachers = [];\n        \n        for (const input of teacherInputs) {\n            const teacher = input.value.trim();\n            if (teacher) {\n                teachers.push(teacher);\n            }\n        }\n        \n        if (!subjectCode || !subjectName || teachers.length === 0) {\n            showToast('Please fill in all subject details including at least one teacher', 'error');\n            return null;\n        }\n        \n        subjects.push({\n            code: subjectCode,\n            name: subjectName,\n            teachers: teachers,\n            priority: priority,\n            isLab: isLab,\n            labDuration: labDuration\n        });\n    }\n    \n    return {\n        courseName,\n        className: sectionName ? `${className} - ${sectionName}` : className,\n        numberOfSections,\n        workingDays,\n        maxHoursPerDay,\n        freeLectures,\n        breakEnabled,\n        breakStart: breakStart - 1, // Convert to 0-based index  \n        breakDurationMinutes,\n        startTime,\n        lectureDuration,\n        subjects\n    };\n}\n\nfunction generateTimetable(data) {\n    const startTime = Date.now();\n    const TIMEOUT_MS = 10000; // 10 second timeout for single timetable\n    \n    try {\n        const { workingDays, maxHoursPerDay, subjects, breakEnabled, breakStart, breakDurationMinutes } = data;\n        \n        // For single sections, use simple algorithm to avoid complexity\n        if (!data.numberOfSections || data.numberOfSections === 1) {\n            return generateSimpleTimetable(data);\n        }\n        \n        // Initialize timetable grid - STRICTLY respect maxHoursPerDay\n        const grid = [];\n        for (let period = 0; period < maxHoursPerDay; period++) {\n            const row = [];\n            for (let day = 0; day < workingDays; day++) {\n                row.push({ subject: null, teacher: null, subjectCode: null, isBreak: false });\n            }\n            grid.push(row);\n        }\n        \n        // Create allocation plan\n        const allocationPlan = createAllocationPlan(subjects, data);\n        \n        // Allocate subjects to timetable with timeout protection\n        const success = allocateSubjectsWithTimeout(grid, allocationPlan, data, startTime, TIMEOUT_MS);\n        \n        if (!success) {\n            console.warn('Some subjects could not be allocated due to timetable constraints, using simple allocation');\n            return generateSimpleTimetable(data);\n        }\n        \n        return {\n            ...data,\n            timetableGrid: grid,\n            breakEnabled,\n            breakStart,\n            breakDurationMinutes\n        };\n    } catch (error) {\n        console.error('Error in generateTimetable:', error);\n        return generateSimpleTimetable(data);\n    }\n}\n\nfunction createAllocationPlan(subjects, data) {\n    const { workingDays, maxHoursPerDay } = data;\n    \n    // Calculate total lectures per week (breaks don't reduce lecture count)\n    const totalLecturesPerWeek = workingDays * maxHoursPerDay;\n    \n    // Calculate base lectures per subject = total lectures / number of subjects\n    const baseLecturesPerSubject = Math.floor(totalLecturesPerWeek / subjects.length);\n    \n    // Count high priority subjects\n    const highPrioritySubjects = subjects.filter(subject => subject.priority === 'high');\n    const normalPrioritySubjects = subjects.filter(subject => subject.priority === 'normal' || subject.priority === 'low');\n    \n    // Calculate remaining lectures after base allocation\n    const baseTotalUsed = baseLecturesPerSubject * subjects.length;\n    const remainingLectures = totalLecturesPerWeek - baseTotalUsed;\n    \n    // Assign base lectures to all subjects first\n    subjects.forEach(subject => {\n        subject.lecturesPerWeek = baseLecturesPerSubject;\n    });\n    \n    // Note: Priority allocation now happens after grid creation, filling actual empty slots\n    \n    // Log the final allocation before scaling\n    console.log('Lectures per subject (base allocation):');\n    subjects.forEach(subject => {\n        console.log(`${subject.name} (${subject.priority}): ${subject.lecturesPerWeek} lectures`);\n    });\n    \n    // Calculate total lectures requested\n    let totalLecturesRequested = 0;\n    subjects.forEach(subject => {\n        if (subject.isLab && subject.labDuration === 'double') {\n            // Double duration labs take 2 slots\n            totalLecturesRequested += subject.lecturesPerWeek * 2;\n        } else {\n            totalLecturesRequested += subject.lecturesPerWeek;\n        }\n    });\n    \n    console.log(`Total lectures available: ${totalLecturesPerWeek}, Total lectures requested: ${totalLecturesRequested}`);\n    \n    // If too many lectures requested, proportionally reduce them\n    let scaleFactor = 1;\n    if (totalLecturesRequested > totalLecturesPerWeek) {\n        scaleFactor = totalLecturesPerWeek / totalLecturesRequested;\n        console.warn(`Too many lectures requested. Scaling down by factor: ${scaleFactor.toFixed(2)}`);\n    }\n    \n    const plan = [];\n    \n    subjects.forEach(subject => {\n        // Apply scaling factor to lectures per week\n        let adjustedLectures = Math.floor(subject.lecturesPerWeek * scaleFactor);\n        \n        // Ensure at least 1 lecture for high priority subjects\n        if (adjustedLectures === 0 && subject.priority === 'high') {\n            adjustedLectures = 1;\n        }\n        \n        if (adjustedLectures > 0) {\n            // Distribute lectures among teachers\n            const teachersCount = subject.teachers.length;\n            const lecturesPerTeacher = Math.floor(adjustedLectures / teachersCount);\n            const extraLectures = adjustedLectures % teachersCount;\n            \n            subject.teachers.forEach((teacher, index) => {\n                const lectures = lecturesPerTeacher + (index < extraLectures ? 1 : 0);\n                \n                for (let l = 0; l < lectures; l++) {\n                    plan.push({\n                        subject: subject.name,\n                        subjectCode: subject.code,\n                        teacher: teacher,\n                        priority: subject.priority,\n                        isLab: subject.isLab,\n                        labDuration: subject.labDuration,\n                        allocated: false\n                    });\n                }\n            });\n        }\n    });\n    \n    // Sort by priority, with lab subjects requiring double duration first\n    plan.sort((a, b) => {\n        const priorityOrder = { high: 3, normal: 2, low: 1 };\n        \n        // Lab subjects with double duration get highest priority\n        if (a.isLab && a.labDuration === 'double' && (!b.isLab || b.labDuration !== 'double')) {\n            return -1;\n        }\n        if (b.isLab && b.labDuration === 'double' && (!a.isLab || a.labDuration !== 'double')) {\n            return 1;\n        }\n        \n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n    \n    console.log(`Final allocation plan: ${plan.length} lectures to allocate`);\n    return plan;\n}\n\n// Enhanced function to generate timetables for multiple sections with teacher conflict prevention\nfunction generateMultipleSectionTimetables(data) {\n    const startTime = Date.now();\n    const TIMEOUT_MS = 30000; // 30 second timeout to prevent infinite loops\n    \n    try {\n        // RESET master allocation plan and teacher schedule for new generation\n        window.MASTER_ALLOCATION_PLAN = null;\n        window.GLOBAL_TEACHER_SCHEDULE = {};\n        \n        const sections = [];\n        // Global teacher schedule to prevent conflicts across sections\n        // Format: { \"teacherName_day_period\": true }\n        const globalTeacherSchedule = {};\n        \n        console.log(`Generating conflict-free timetables for ${data.numberOfSections} sections...`);\n        \n        // PRE-CREATE the master allocation plan ONCE for ALL sections\n        const totalSlots = data.workingDays * data.maxHoursPerDay;\n        const slotsPerSubject = Math.floor(totalSlots / data.subjects.length);\n        const masterAllocationPlan = {};\n        \n        console.log(`Creating MASTER allocation plan for ${data.subjects.length} subjects:`);\n        data.subjects.forEach(subject => {\n            const isDoubleLab = subject.isLab && subject.labDuration === 'double';\n            \n            if (isDoubleLab) {\n                const labSessions = Math.floor(slotsPerSubject / 2);\n                masterAllocationPlan[subject.name] = {\n                    type: 'doubleLab',\n                    sessions: labSessions,\n                    isLab: true,\n                    labDuration: 'double'\n                };\n                console.log(`  ${subject.name}: ${labSessions} double-lab sessions (${labSessions * 2} total periods)`);\n            } else {\n                masterAllocationPlan[subject.name] = {\n                    type: 'regular',\n                    sessions: slotsPerSubject,\n                    isLab: subject.isLab || false,\n                    labDuration: subject.labDuration || 'regular'\n                };\n                console.log(`  ${subject.name}: ${slotsPerSubject} ${subject.isLab ? 'single-lab' : 'theory'} sessions`);\n            }\n        });\n        \n        // Generate each section using the SAME master plan\n        for (let sectionNum = 1; sectionNum <= data.numberOfSections; sectionNum++) {\n            // Check timeout\n            if (Date.now() - startTime > TIMEOUT_MS) {\n                console.error('Timetable generation timeout - stopping to prevent infinite loop');\n                return null;\n            }\n            \n            const sectionData = {\n                ...data,\n                className: `${data.className} - Section ${sectionNum}`,\n                sectionNumber: sectionNum,\n                globalTeacherSchedule: globalTeacherSchedule, // Pass global schedule to prevent conflicts\n                globalAllocationPlan: masterAllocationPlan // Use FIXED master plan for ALL sections\n            };\n            \n            // Distribute teachers across sections\n            const adjustedSubjects = distributeTeachersSimple(data.subjects, sectionNum, data.numberOfSections);\n            sectionData.subjects = adjustedSubjects;\n            \n            console.log(`Generating Section ${sectionNum} with FIXED allocation plan...`);\n            const sectionTimetable = generateConflictFreeTimetable(sectionData);\n            if (!sectionTimetable) {\n                console.error(`Failed to generate timetable for section ${sectionNum}`);\n                return null;\n            }\n            \n            sections.push(sectionTimetable);\n        }\n        \n        return {\n            ...data,\n            sections: sections,\n            numberOfSections: data.numberOfSections\n        };\n    } catch (error) {\n        console.error('Error in generateMultipleSectionTimetables:', error);\n        return null;\n    }\n}\n\n// Simple round-robin teacher distribution to prevent complexity\nfunction distributeTeachersSimple(subjects, sectionNumber, totalSections) {\n    console.log(`Distributing teachers for Section ${sectionNumber}:`);\n    \n    return subjects.map(subject => {\n        if (subject.teachers.length === 1) {\n            console.log(`  ${subject.name}: ${subject.teachers[0]} (single teacher for all sections)`);\n            return subject; // Single teacher handles all sections\n        }\n        \n        // Round-robin assignment\n        const teacherIndex = (sectionNumber - 1) % subject.teachers.length;\n        const assignedTeacher = subject.teachers[teacherIndex];\n        \n        console.log(`  ${subject.name}: Assigned ${assignedTeacher} (teacher ${teacherIndex + 1} of ${subject.teachers.length})`);\n        \n        return {\n            ...subject,\n            teachers: [assignedTeacher]\n        };\n    });\n}\n\n// Simplified timetable generation to prevent infinite loops\nfunction generateSimpleTimetable(data) {\n    const { workingDays, maxHoursPerDay, subjects } = data;\n    \n    // Initialize grid\n    const grid = [];\n    for (let period = 0; period < maxHoursPerDay; period++) {\n        const row = [];\n        for (let day = 0; day < workingDays; day++) {\n            row.push({ subject: null, teacher: null, subjectCode: null, isBreak: false });\n        }\n        grid.push(row);\n    }\n    \n    // Create allocation plan with lab duration support - respect freeLectures setting\n    const allocationPlan = [];\n    const totalSlots = workingDays * maxHoursPerDay;\n    const maxFreeLecturesAllowed = parseInt(data.freeLectures) || 0;\n    const availableSlots = totalSlots - maxFreeLecturesAllowed;\n    const slotsPerSubject = Math.floor(availableSlots / subjects.length);\n    \n    // For single timetables, create consistent allocation plan\n    subjects.forEach(subject => {\n        const teacher = subject.teachers[0]; // Use first teacher\n        const isDoubleLab = subject.isLab && subject.labDuration === 'double';\n        \n        if (isDoubleLab) {\n            // For double duration labs, create half the sessions but each takes 2 slots\n            const labSessions = Math.floor(slotsPerSubject / 2);\n            console.log(`Single Timetable: ${subject.name} = ${labSessions} double-lab sessions (${labSessions * 2} total periods)`);\n            for (let i = 0; i < labSessions; i++) {\n                allocationPlan.push({\n                    subject: subject.name,\n                    teacher: teacher,\n                    subjectCode: subject.code,\n                    isLab: true,\n                    isDouble: true,\n                    labDuration: 'double'\n                });\n            }\n        } else {\n            // Regular subjects or single-period labs\n            console.log(`Single Timetable: ${subject.name} = ${slotsPerSubject} ${subject.isLab ? 'single-lab' : 'theory'} sessions`);\n            for (let i = 0; i < slotsPerSubject; i++) {\n                allocationPlan.push({\n                    subject: subject.name,\n                    teacher: teacher,\n                    subjectCode: subject.code,\n                    isLab: subject.isLab || false,\n                    isDouble: false,\n                    labDuration: subject.labDuration || 'regular'\n                });\n            }\n        }\n    });\n    \n    // Allocate subjects with lab support\n    let currentDay = 0;\n    let currentPeriod = 0;\n    \n    for (const allocation of allocationPlan) {\n        let allocated = false;\n        let attempts = 0;\n        const maxAttempts = totalSlots;\n        \n        while (!allocated && attempts < maxAttempts) {\n            if (allocation.isDouble) {\n                // Need 2 consecutive periods for double lab (avoid breaks)\n                if (currentPeriod < maxHoursPerDay - 1 && \n                    !grid[currentPeriod][currentDay].subject && \n                    !grid[currentPeriod + 1][currentDay].subject) {\n                    \n                    // Skip if break would be between the two periods\n                    if (data.breakEnabled && \n                        (currentPeriod === data.breakStart - 1 || currentPeriod + 1 === data.breakStart)) {\n                        // Skip this slot, continue searching\n                    } else {\n                        // Allocate double lab\n                        grid[currentPeriod][currentDay] = {\n                            subject: allocation.subject,\n                            teacher: allocation.teacher,\n                            subjectCode: allocation.subjectCode,\n                            isBreak: false,\n                            isLab: true,\n                            labPart: 1,\n                            labDuration: 'double'\n                        };\n                        \n                        grid[currentPeriod + 1][currentDay] = {\n                            subject: allocation.subject,\n                            teacher: allocation.teacher,\n                            subjectCode: allocation.subjectCode,\n                            isBreak: false,\n                            isLab: true,\n                            labPart: 2,\n                            labDuration: 'double'\n                        };\n                        \n                        allocated = true;\n                        console.log(`Allocated DOUBLE LAB: ${allocation.subject} on Day ${currentDay+1} Period ${currentPeriod+1}-${currentPeriod+2}`);\n                    }\n                }\n            } else {\n                // Regular allocation\n                if (!grid[currentPeriod][currentDay].subject) {\n                    grid[currentPeriod][currentDay] = {\n                        subject: allocation.subject,\n                        teacher: allocation.teacher,\n                        subjectCode: allocation.subjectCode,\n                        isBreak: false,\n                        isLab: allocation.isLab,\n                        labDuration: allocation.labDuration\n                    };\n                    allocated = true;\n                }\n            }\n            \n            // Move to next slot\n            currentPeriod++;\n            if (currentPeriod >= maxHoursPerDay) {\n                currentPeriod = 0;\n                currentDay++;\n                if (currentDay >= workingDays) {\n                    currentDay = 0;\n                }\n            }\n            \n            attempts++;\n        }\n        \n        if (!allocated) {\n            console.warn(`Could not allocate ${allocation.subject} (${allocation.isDouble ? 'Double Lab' : 'Regular'})`);\n        }\n    }\n    \n    // Handle remaining empty slots based on freeLectures setting\n    const maxFreeLectures = parseInt(data.freeLectures) || 0;\n    let freeSlotsFilled = 0;\n    const emptySlots = [];\n    \n    // First, collect all empty slots\n    for (let period = 0; period < maxHoursPerDay; period++) {\n        for (let day = 0; day < workingDays; day++) {\n            if (!grid[period][day].subject) {\n                remainingEmptySlots.push({period, day});\n            }\n        }\n    }\n    \n    console.log(`Found ${emptySlots.length} empty slots, freeLectures setting: ${maxFreeLectures}`);\n    \n    // Fill slots based on freeLectures setting\n    for (let i = 0; i < emptySlots.length; i++) {\n        const {period, day} = emptySlots[i];\n        \n        if (freeSlotsFilled < maxFreeLectures) {\n            // Fill with \"Free\" period\n            grid[period][day] = {\n                subject: 'Free',\n                teacher: '',\n                subjectCode: '',\n                isBreak: false\n            };\n            freeSlotsFilled++;\n        } else {\n            // Fill with high priority subjects (or any subject if no high priority)\n            const highPrioritySubjects = data.subjects.filter(s => s.priority === 'High');\n            const subjectsToUse = highPrioritySubjects.length > 0 ? highPrioritySubjects : data.subjects;\n            \n            const randomSubject = subjectsToUse[Math.floor(Math.random() * subjectsToUse.length)];\n            const randomTeacher = randomSubject.teachers[Math.floor(Math.random() * randomSubject.teachers.length)];\n            \n            grid[period][day] = {\n                subject: randomSubject.name,\n                teacher: randomTeacher,\n                subjectCode: randomSubject.code,\n                isBreak: false\n            };\n        }\n    }\n    \n    console.log(`Filled ${freeSlotsFilled} free slots and ${emptySlots.length - freeSlotsFilled} subject slots`);\n    \n    return {\n        ...data,\n        timetableGrid: grid\n    };\n}\n\n// NEW GUARANTEED CONSISTENT TIMETABLE GENERATOR\nfunction generateConflictFreeTimetable(data) {\n    const { workingDays, maxHoursPerDay, subjects } = data;\n    \n    // Initialize grid\n    const grid = [];\n    for (let period = 0; period < maxHoursPerDay; period++) {\n        const row = [];\n        for (let day = 0; day < workingDays; day++) {\n            row.push({ subject: null, teacher: null, subjectCode: null, isBreak: false });\n        }\n        grid.push(row);\n    }\n    \n    // STEP 1: Calculate total available periods\n    const totalSlots = workingDays * maxHoursPerDay;\n    const freeLectures = parseInt(data.freeLectures) || 0;\n    let totalBreakPeriods = 0;\n    if (data.breakEnabled) {\n        totalBreakPeriods = workingDays; // One break per day\n    }\n    \n    const availableForSubjects = totalSlots - totalBreakPeriods - freeLectures;\n    \n    console.log(`\\n=== SECTION ${data.sectionNumber} ALLOCATION CALCULATION ===`);\n    console.log(`Working days: ${workingDays}, Max hours per day: ${maxHoursPerDay}`);\n    console.log(`Total slots: ${totalSlots}`);\n    console.log(`Break periods: ${totalBreakPeriods}`);\n    console.log(`Free lectures: ${freeLectures}`);\n    console.log(`Available for subjects: ${availableForSubjects}`);\n    console.log(`Number of subjects: ${subjects.length}`);\n    \n    // STEP 2: Create MASTER ALLOCATION PLAN (same for ALL sections)\n    if (!window.MASTER_ALLOCATION_PLAN) {\n        console.log('\\n=== CREATING MASTER ALLOCATION PLAN ===');\n        window.MASTER_ALLOCATION_PLAN = {};\n        \n        const periodsPerSubject = Math.floor(availableForSubjects / subjects.length);\n        const remainingPeriods = availableForSubjects % subjects.length;\n        \n        console.log(`Base periods per subject: ${periodsPerSubject}`);\n        console.log(`Extra periods to distribute: ${remainingPeriods}`);\n        \n        // Separate subjects by priority and type\n        const highPrioritySubjects = subjects.filter(s => s.priority === 'High');\n        const mediumPrioritySubjects = subjects.filter(s => s.priority === 'Medium');\n        const lowPrioritySubjects = subjects.filter(s => s.priority === 'Low');\n        \n        console.log(`Priority breakdown: High=${highPrioritySubjects.length}, Medium=${mediumPrioritySubjects.length}, Low=${lowPrioritySubjects.length}`);\n        \n        // Calculate minimum periods needed\n        let periodsUsed = 0;\n        \n        let remainingToDistribute = remainingPeriods;\n        \n        subjects.forEach((subject, index) => {\n            // Base allocation\n            let subjectPeriods = periodsPerSubject;\n            \n                // Distribute extra periods to high priority subjects evenly\n            if (remainingToDistribute > 0) {\n                if (subject.priority === 'High') {\n                    // Give extra periods to high priority subjects first\n                    const extraForHigh = Math.ceil(remainingToDistribute / highPrioritySubjects.length);\n                    const actualExtra = Math.min(extraForHigh, remainingToDistribute);\n                    subjectPeriods += actualExtra;\n                    remainingToDistribute -= actualExtra;\n                } else if (subject.priority === 'Medium' && highPrioritySubjects.length === 0) {\n                    // If no high priority, give to medium priority\n                    const extraForMedium = Math.ceil(remainingToDistribute / mediumPrioritySubjects.length);\n                    const actualExtra = Math.min(extraForMedium, remainingToDistribute);\n                    subjectPeriods += actualExtra;\n                    remainingToDistribute -= actualExtra;\n                } else if (subject.priority === 'Low' && highPrioritySubjects.length === 0 && mediumPrioritySubjects.length === 0) {\n                    // If no high or medium priority, give to low priority\n                    const extraForLow = Math.ceil(remainingToDistribute / lowPrioritySubjects.length);\n                    const actualExtra = Math.min(extraForLow, remainingToDistribute);\n                    subjectPeriods += actualExtra;\n                    remainingToDistribute -= actualExtra;\n                }\n            }\n            \n            // Handle lab configuration\n            if (subject.isLab && subject.labDuration === 'double') {\n                // Double labs - need pairs of periods\n                const labSessions = Math.floor(subjectPeriods / 2);\n                const actualPeriods = labSessions * 2;\n                \n                window.MASTER_ALLOCATION_PLAN[subject.name] = {\n                    totalPeriods: actualPeriods,\n                    labSessions: labSessions,\n                    isLab: true,\n                    labType: 'double',\n                    singlePeriods: 0,\n                    priority: subject.priority\n                };\n                periodsUsed += actualPeriods;\n                console.log(`${subject.name} (${subject.priority}): ${labSessions} double labs (${actualPeriods} periods)`);\n            } else if (subject.isLab) {\n                // Single period labs\n                window.MASTER_ALLOCATION_PLAN[subject.name] = {\n                    totalPeriods: subjectPeriods,\n                    labSessions: subjectPeriods,\n                    isLab: true,\n                    labType: 'single',\n                    singlePeriods: subjectPeriods,\n                    priority: subject.priority\n                };\n                periodsUsed += subjectPeriods;\n                console.log(`${subject.name} (${subject.priority}): ${subjectPeriods} single labs`);\n            } else {\n                // Theory subjects\n                window.MASTER_ALLOCATION_PLAN[subject.name] = {\n                    totalPeriods: subjectPeriods,\n                    labSessions: 0,\n                    isLab: false,\n                    labType: 'theory',\n                    singlePeriods: subjectPeriods,\n                    priority: subject.priority\n                };\n                periodsUsed += subjectPeriods;\n                console.log(`${subject.name} (${subject.priority}): ${subjectPeriods} theory periods`);\n            }\n        });\n        \n        // FORCE DISTRIBUTE ALL REMAINING PERIODS to ensure no OFF periods\n        const actualRemainingToDistribute = availableForSubjects - periodsUsed;\n        console.log(`Periods used: ${periodsUsed}, Remaining MUST distribute: ${actualRemainingToDistribute}`);\n        \n        if (actualRemainingToDistribute > 0) {\n            console.log(`FORCE distributing ${actualRemainingToDistribute} periods to prevent OFF periods`);\n            let distributedExtra = 0;\n            \n            // First try high priority non-lab subjects\n            for (let i = 0; i < actualRemainingToDistribute && distributedExtra < actualRemainingToDistribute; i++) {\n                const targetSubject = highPrioritySubjects.length > 0 ? \n                    highPrioritySubjects[i % highPrioritySubjects.length] : \n                    subjects[i % subjects.length];\n                    \n                const plan = window.MASTER_ALLOCATION_PLAN[targetSubject.name];\n                \n                if (!plan.isLab || plan.labType !== 'double') {\n                    // Add extra periods to theory or single lab subjects\n                    plan.totalPeriods++;\n                    plan.singlePeriods++;\n                    distributedExtra++;\n                    console.log(`FORCE added extra period to ${targetSubject.name} (total: ${plan.totalPeriods})`);\n                }\n            }\n            \n            // If still have remaining, distribute to ANY subject\n            for (let i = 0; distributedExtra < actualRemainingToDistribute && i < subjects.length * 3; i++) {\n                const targetSubject = subjects[i % subjects.length];\n                const plan = window.MASTER_ALLOCATION_PLAN[targetSubject.name];\n                \n                plan.totalPeriods++;\n                if (plan.isLab && plan.labType === 'double') {\n                    // Convert one double lab to two single periods if needed\n                    plan.singlePeriods += 2;\n                } else {\n                    plan.singlePeriods++;\n                }\n                distributedExtra++;\n                console.log(`EMERGENCY added period to ${targetSubject.name} (total: ${plan.totalPeriods})`);\n            }\n        }\n    }\n    \n    // STEP 3: Generate optimized subject allocation list for this section\n    const subjectList = [];\n    const theorySubjects = [];\n    const labSubjects = [];\n    \n    subjects.forEach(subject => {\n        const plan = window.MASTER_ALLOCATION_PLAN[subject.name];\n        const teacher = subject.teachers[0];\n        \n        console.log(`\\nSection ${data.sectionNumber} - ${subject.name}:`);\n        console.log(`  Plan: ${plan.totalPeriods} total periods`);\n        \n        if (plan.labType === 'double') {\n            // Add double lab sessions\n            for (let i = 0; i < plan.labSessions; i++) {\n                const labItem = {\n                    subject: subject.name,\n                    subjectCode: subject.code,\n                    teacher: teacher,\n                    isLab: true,\n                    labType: 'double',\n                    priority: plan.priority,\n                    sessionId: `${subject.name}_double_${i}`\n                };\n                subjectList.push(labItem);\n                labSubjects.push(labItem);\n                console.log(`  Added double lab ${i + 1}`);\n            }\n        } else {\n            // Add single period sessions (labs or theory)\n            for (let i = 0; i < plan.singlePeriods; i++) {\n                const item = {\n                    subject: subject.name,\n                    subjectCode: subject.code,\n                    teacher: teacher,\n                    isLab: plan.isLab,\n                    labType: plan.labType,\n                    priority: plan.priority,\n                    sessionId: `${subject.name}_single_${i}`\n                };\n                subjectList.push(item);\n                \n                if (plan.isLab) {\n                    labSubjects.push(item);\n                } else {\n                    theorySubjects.push(item);\n                }\n                console.log(`  Added ${plan.labType} period ${i + 1}`);\n            }\n        }\n    });\n    \n    console.log(`\\nSection ${data.sectionNumber}: Total periods to allocate: ${subjectList.length}`);\n    console.log(`  Theory periods: ${theorySubjects.length}`);\n    console.log(`  Lab periods: ${labSubjects.length}`);\n    \n    // STEP 4: OPTIMIZED DAY-BY-DAY ALLOCATION - Avoid consecutive same theory subjects\n    console.log(`\\n=== STARTING OPTIMIZED DAY-BY-DAY ALLOCATION ===`);\n    \n    // Initialize global teacher schedule if not exists\n    if (!window.GLOBAL_TEACHER_SCHEDULE) {\n        window.GLOBAL_TEACHER_SCHEDULE = {};\n    }\n    \n    let allocatedCount = 0;\n    \n    // Sort subjects to prioritize labs first, then distribute theory subjects\n    const sortedSubjects = [...subjectList].sort((a, b) => {\n        if (a.isLab && !b.isLab) return -1; // Labs first\n        if (!a.isLab && b.isLab) return 1;\n        if (a.priority === 'High' && b.priority !== 'High') return -1; // High priority first\n        if (a.priority !== 'High' && b.priority === 'High') return 1;\n        return 0;\n    });\n    \n    for (const item of sortedSubjects) {\n        let allocated = false;\n        let attempts = 0;\n        const maxAttempts = totalSlots * 2;\n        \n        // Try each slot with smart placement logic\n        for (let day = 0; day < workingDays && !allocated; day++) {\n            for (let period = 0; period < maxHoursPerDay && !allocated; period++) {\n                attempts++;\n                if (attempts > maxAttempts) break;\n                \n                // Skip break periods\n                if (data.breakEnabled && period === data.breakStart) {\n                    continue;\n                }\n                \n                if (item.labType === 'double') {\n                    // Need 2 consecutive periods for double labs\n                    if (period < maxHoursPerDay - 1 && \n                        !grid[period][day].subject && \n                        !grid[period + 1][day].subject &&\n                        !(data.breakEnabled && (period + 1 === data.breakStart))) {\n                        \n                        // Check teacher availability for both periods\n                        const teacherKey1 = `${item.teacher}_${day}_${period}`;\n                        const teacherKey2 = `${item.teacher}_${day}_${period + 1}`;\n                        \n                        if (!window.GLOBAL_TEACHER_SCHEDULE[teacherKey1] && \n                            !window.GLOBAL_TEACHER_SCHEDULE[teacherKey2]) {\n                            \n                            // Allocate double lab\n                            grid[period][day] = {\n                                subject: item.subject,\n                                subjectCode: item.subjectCode,\n                                teacher: item.teacher,\n                                isBreak: false,\n                                isLab: true,\n                                labPart: 1,\n                                labDuration: 'double'\n                            };\n                            \n                            grid[period + 1][day] = {\n                                subject: item.subject,\n                                subjectCode: item.subjectCode,\n                                teacher: item.teacher,\n                                isBreak: false,\n                                isLab: true,\n                                labPart: 2,\n                                labDuration: 'double'\n                            };\n                            \n                            // Mark teacher as busy globally\n                            window.GLOBAL_TEACHER_SCHEDULE[teacherKey1] = true;\n                            window.GLOBAL_TEACHER_SCHEDULE[teacherKey2] = true;\n                            \n                            allocated = true;\n                            allocatedCount++;\n                            console.log(`✓ Double lab ${item.subject} (${item.teacher}) allocated to Day${day+1} P${period+1}-${period+2}`);\n                        }\n                    }\n                } else {\n                    // Single period - check for consecutive theory subjects\n                    if (!grid[period][day].subject) {\n                        // Check teacher availability\n                        const teacherKey = `${item.teacher}_${day}_${period}`;\n                        \n                        if (!window.GLOBAL_TEACHER_SCHEDULE[teacherKey]) {\n                            // For theory subjects, avoid consecutive same subjects\n                            let canPlace = true;\n                            if (!item.isLab) {\n                                // Check previous period on same day\n                                if (period > 0 && grid[period - 1][day].subject === item.subject) {\n                                    canPlace = false;\n                                }\n                                // Check next period on same day\n                                if (period < maxHoursPerDay - 1 && grid[period + 1][day].subject === item.subject) {\n                                    canPlace = false;\n                                }\n                            }\n                            \n                            if (canPlace) {\n                                grid[period][day] = {\n                                    subject: item.subject,\n                                    subjectCode: item.subjectCode,\n                                    teacher: item.teacher,\n                                    isBreak: false,\n                                    isLab: item.isLab,\n                                    labDuration: item.labType === 'single' ? 'single' : 'regular'\n                                };\n                                \n                                // Mark teacher as busy globally\n                                window.GLOBAL_TEACHER_SCHEDULE[teacherKey] = true;\n                                \n                                allocated = true;\n                                allocatedCount++;\n                                console.log(`✓ ${item.labType} ${item.subject} (${item.teacher}) allocated to Day${day+1} P${period+1}`);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        if (!allocated) {\n            console.error(`❌ FAILED to allocate ${item.subject} (${item.teacher}) - teacher conflicts or grid full`);\n            \n            // Force allocation if we must (fallback to ensure consistency)\n            for (let day = 0; day < workingDays && !allocated; day++) {\n                for (let period = 0; period < maxHoursPerDay && !allocated; period++) {\n                    if (data.breakEnabled && period === data.breakStart) continue;\n                    \n                    if (item.labType === 'double') {\n                        if (period < maxHoursPerDay - 1 && \n                            !grid[period][day].subject && \n                            !grid[period + 1][day].subject &&\n                            !(data.breakEnabled && (period + 1 === data.breakStart))) {\n                            \n                            grid[period][day] = {\n                                subject: item.subject,\n                                subjectCode: item.subjectCode,\n                                teacher: item.teacher,\n                                isBreak: false,\n                                isLab: true,\n                                labPart: 1,\n                                labDuration: 'double'\n                            };\n                            \n                            grid[period + 1][day] = {\n                                subject: item.subject,\n                                subjectCode: item.subjectCode,\n                                teacher: item.teacher,\n                                isBreak: false,\n                                isLab: true,\n                                labPart: 2,\n                                labDuration: 'double'\n                            };\n                            \n                            allocated = true;\n                            console.warn(`⚠️ FORCED double lab allocation ${item.subject} (${item.teacher}) at Day${day+1} P${period+1}-${period+2}`);\n                        }\n                    } else {\n                        if (!grid[period][day].subject) {\n                            grid[period][day] = {\n                                subject: item.subject,\n                                subjectCode: item.subjectCode,\n                                teacher: item.teacher,\n                                isBreak: false,\n                                isLab: item.isLab,\n                                labDuration: item.labType === 'single' ? 'single' : 'regular'\n                            };\n                            \n                            allocated = true;\n                            console.warn(`⚠️ FORCED allocation ${item.subject} (${item.teacher}) at Day${day+1} P${period+1}`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // STEP 5: Fill breaks\n    if (data.breakEnabled) {\n        for (let day = 0; day < workingDays; day++) {\n            if (!grid[data.breakStart][day].subject) {\n                grid[data.breakStart][day] = {\n                    subject: 'Break',\n                    teacher: '',\n                    subjectCode: '',\n                    isBreak: true\n                };\n            }\n        }\n    }\n    \n    // STEP 6: Fill remaining slots with priority subjects (NO free lectures if freeLectures = 0)\n    console.log(`\\n=== FILLING REMAINING SLOTS ===`);\n    \n    // Count empty slots\n    let emptySlots = 0;\n    const emptyPositions = [];\n    \n    for (let period = 0; period < maxHoursPerDay; period++) {\n        for (let day = 0; day < workingDays; day++) {\n            if (!grid[period][day].subject) {\n                emptySlots++;\n                emptyPositions.push({period, day});\n            }\n        }\n    }\n    \n    console.log(`Found ${emptySlots} empty slots, freeLectures setting: ${freeLectures}`);\n    \n    if (freeLectures === 0 && emptySlots > 0) {\n        // Fill empty slots with high priority subjects to avoid OFF periods\n        console.log(`Filling ${emptySlots} empty slots with high priority subjects...`);\n        \n        const highPrioritySubjects = subjects.filter(s => s.priority === 'High' && !s.isLab);\n        if (highPrioritySubjects.length === 0) {\n            // Fallback to any non-lab subjects\n            const fallbackSubjects = subjects.filter(s => !s.isLab);\n            highPrioritySubjects.push(...fallbackSubjects);\n        }\n        \n        let subjectIndex = 0;\n        for (const pos of emptyPositions) {\n            if (highPrioritySubjects.length > 0) {\n                const subject = highPrioritySubjects[subjectIndex % highPrioritySubjects.length];\n                const teacher = subject.teachers[0];\n                \n                // Check teacher availability\n                const teacherKey = `${teacher}_${pos.day}_${pos.period}`;\n                \n                if (!window.GLOBAL_TEACHER_SCHEDULE[teacherKey]) {\n                    grid[pos.period][pos.day] = {\n                        subject: subject.name,\n                        subjectCode: subject.code,\n                        teacher: teacher,\n                        isBreak: false,\n                        isLab: false,\n                        priority: 'Extra'\n                    };\n                    \n                    // Mark teacher as busy\n                    window.GLOBAL_TEACHER_SCHEDULE[teacherKey] = true;\n                    console.log(`✓ Filled empty slot Day${pos.day+1} P${pos.period+1} with ${subject.name} (${teacher})`);\n                } else {\n                    // Teacher conflict, try next subject or leave as Free\n                    grid[pos.period][pos.day] = {\n                        subject: 'Study',\n                        teacher: '',\n                        subjectCode: '',\n                        isBreak: false\n                    };\n                    console.log(`⚠️ Teacher conflict at Day${pos.day+1} P${pos.period+1}, marked as Study period`);\n                }\n                subjectIndex++;\n            }\n        }\n    } else if (freeLectures > 0) {\n        // Fill with Free periods as requested\n        for (const pos of emptyPositions) {\n            grid[pos.period][pos.day] = {\n                subject: 'Free',\n                teacher: '',\n                subjectCode: '',\n                isBreak: false\n            };\n        }\n        console.log(`Filled ${emptySlots} slots with Free periods as requested`);\n    }\n    \n    console.log(`Slot filling complete`);\n    \n    // STEP 7: Final verification\n    console.log(`\\n=== FINAL VERIFICATION Section ${data.sectionNumber} ===`);\n    const subjectCounts = {};\n    const labCounts = {};\n    let freeCount = 0;\n    \n    for (let period = 0; period < maxHoursPerDay; period++) {\n        for (let day = 0; day < workingDays; day++) {\n            const cell = grid[period][day];\n            if (cell.subject === 'Free') {\n                freeCount++;\n            } else if (cell.subject && cell.subject !== 'Break' && cell.subject !== 'ERROR') {\n                subjectCounts[cell.subject] = (subjectCounts[cell.subject] || 0) + 1;\n                if (cell.isLab) {\n                    labCounts[cell.subject] = (labCounts[cell.subject] || 0) + 1;\n                }\n            }\n        }\n    }\n    \n    console.log(`Subject counts:`, subjectCounts);\n    console.log(`Lab counts:`, labCounts);\n    console.log(`Free periods: ${freeCount} (expected: ${freeLectures})`);\n    \n    return {\n        ...data,\n        timetableGrid: grid\n    };\n}\n\n// Timeout-protected allocation function\nfunction allocateSubjectsWithTimeout(grid, allocationPlan, data, startTime, timeoutMs) {\n    const { workingDays, maxHoursPerDay } = data;\n    \n    // Simple round-robin allocation to prevent infinite loops\n    let currentSlot = 0;\n    const totalSlots = workingDays * maxHoursPerDay;\n    \n    for (const allocation of allocationPlan) {\n        // Check timeout\n        if (Date.now() - startTime > timeoutMs) {\n            console.warn('Allocation timeout reached');\n            return false;\n        }\n        \n        // Find next available slot\n        let allocated = false;\n        let attempts = 0;\n        const maxAttempts = totalSlots;\n        \n        while (!allocated && attempts < maxAttempts) {\n            if (currentSlot >= totalSlots) {\n                currentSlot = 0; // Wrap around\n            }\n            \n            const day = Math.floor(currentSlot / maxHoursPerDay);\n            const period = currentSlot % maxHoursPerDay;\n            \n            if (day < workingDays && period < maxHoursPerDay && !grid[period][day].subject) {\n                grid[period][day] = {\n                    subject: allocation.subject,\n                    subjectCode: allocation.subjectCode,\n                    teacher: allocation.teacher,\n                    isBreak: false\n                };\n                allocated = true;\n            }\n            \n            currentSlot++;\n            attempts++;\n        }\n        \n        if (!allocated) {\n            console.warn('Could not allocate:', allocation.subject);\n        }\n    }\n    \n    // Only fill remaining slots with \"Free\" if freeLectures parameter allows it\n    const allowedFreeLectures = parseInt(data.freeLectures) || 0;\n    let freeSlotsFilled = 0;\n    \n    if (allowedFreeLectures > 0) {\n        for (let period = 0; period < maxHoursPerDay; period++) {\n            for (let day = 0; day < workingDays; day++) {\n                if (!grid[period][day].subject && freeSlotsFilled < allowedFreeLectures) {\n                    grid[period][day] = {\n                        subject: 'Free',\n                        teacher: '',\n                        subjectCode: '',\n                        isBreak: false\n                    };\n                    freeSlotsFilled++;\n                }\n            }\n        }\n    } else {\n        // When freeLectures = 0, fill ALL remaining empty slots with high priority subjects\n        for (let period = 0; period < maxHoursPerDay; period++) {\n            for (let day = 0; day < workingDays; day++) {\n                if (!grid[period][day].subject) {\n                    const highPrioritySubjects = data.subjects.filter(s => s.priority === 'High');\n                    if (highPrioritySubjects.length > 0) {\n                        const randomSubject = highPrioritySubjects[Math.floor(Math.random() * highPrioritySubjects.length)];\n                        const randomTeacher = randomSubject.teachers[Math.floor(Math.random() * randomSubject.teachers.length)];\n                        grid[period][day] = {\n                            subject: randomSubject.name,\n                            teacher: randomTeacher,\n                            subjectCode: randomSubject.code,\n                            isBreak: false\n                        };\n                    } else {\n                        // No high priority subjects, use any subject\n                        const randomSubject = data.subjects[Math.floor(Math.random() * data.subjects.length)];\n                        const randomTeacher = randomSubject.teachers[Math.floor(Math.random() * randomSubject.teachers.length)];\n                        grid[period][day] = {\n                            subject: randomSubject.name,\n                            teacher: randomTeacher,\n                            subjectCode: randomSubject.code,\n                            isBreak: false\n                        };\n                    }\n                }\n            }\n        }\n    }\n    \n    return true;\n}\n\n// Function to update teacher usage tracking\nfunction updateTeacherUsage(timetable, teacherUsage) {\n    timetable.timetableGrid.forEach(row => {\n        row.forEach(cell => {\n            if (cell.subject && cell.teacher) {\n                const usageKey = `${cell.teacher}_${cell.subjectCode}`;\n                teacherUsage[usageKey] = (teacherUsage[usageKey] || 0) + 1;\n            }\n        });\n    });\n}\n\n// Enhanced allocation function with constraints for better timetable distribution\nfunction allocateSubjectsToGridStrict(grid, allocationPlan, data) {\n    const { workingDays, maxHoursPerDay, globalTeacherSchedule } = data;\n    \n    // Use global teacher schedule if available (for multi-section), otherwise create local one\n    const teacherSchedule = globalTeacherSchedule || {};\n    const dailyAllocations = {}; // Track allocations per day\n    const dailySubjectCount = {}; // Track how many times each subject appears per day\n    \n    // Initialize tracking structures\n    for (let day = 0; day < workingDays; day++) {\n        dailyAllocations[day] = 0;\n        dailySubjectCount[day] = {};\n    }\n    \n    // Initialize global lab tracking for multiple sections\n    if (!data.globalLabTracker) {\n        data.globalLabTracker = {};\n    }\n    \n    // Sort allocation plan by priority and lab requirements\n    allocationPlan.sort((a, b) => {\n        // Labs with double duration get highest priority\n        if (a.isLab && a.labDuration === 'double' && (!b.isLab || b.labDuration !== 'double')) return -1;\n        if (b.isLab && b.labDuration === 'double' && (!a.isLab || a.labDuration !== 'double')) return 1;\n        \n        const priorityOrder = { high: 3, normal: 2, low: 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n    \n    // Helper function to check if placing a subject would create consecutive duplicates\n    function wouldCreateConsecutive(subject, day, period) {\n        // Check previous period (if exists)\n        if (period > 0 && grid[period - 1][day].subject === subject && !grid[period - 1][day].isLab) {\n            return true;\n        }\n        // Check next period (if exists) \n        if (period < maxHoursPerDay - 1 && grid[period + 1][day].subject === subject && !grid[period + 1][day].isLab) {\n            return true;\n        }\n        return false;\n    }\n    \n    // Helper function to get diversity score for a day (higher = more diverse)\n    function getDiversityScore(day, excludePeriod = -1) {\n        const subjectsInDay = new Set();\n        for (let p = 0; p < maxHoursPerDay; p++) {\n            if (p !== excludePeriod && grid[p][day].subject && grid[p][day].subject !== 'OFF') {\n                subjectsInDay.add(grid[p][day].subject);\n            }\n        }\n        return subjectsInDay.size;\n    }\n    \n    // Helper function to find best slots for a subject (considering diversity and no consecutive rule)\n    function findBestSlots(allocation, isDoubleSlot = false) {\n        const candidates = [];\n        \n        for (let day = 0; day < workingDays; day++) {\n            if (dailyAllocations[day] >= maxHoursPerDay) continue;\n            \n            if (isDoubleSlot) {\n                // For double lab slots\n                for (let period = 0; period < maxHoursPerDay - 1; period++) {\n                    if (!grid[period][day].subject && !grid[period + 1][day].subject) {\n                        const teacherKey1 = `${allocation.teacher}_${day}_${period}`;\n                        const teacherKey2 = `${allocation.teacher}_${day}_${period + 1}`;\n                        \n                        if (!teacherSchedule[teacherKey1] && !teacherSchedule[teacherKey2] && \n                            dailyAllocations[day] + 2 <= maxHoursPerDay) {\n                            \n                            // Track lab distribution across sections\n                            const labKey = `${allocation.subjectCode}_lab`;\n                            const currentLabCount = data.globalLabTracker[labKey] || 0;\n                            \n                            candidates.push({\n                                day,\n                                period,\n                                priority: 100, // Labs get highest priority\n                                labCount: currentLabCount\n                            });\n                        }\n                    }\n                }\n            } else {\n                // For regular subjects\n                for (let period = 0; period < maxHoursPerDay; period++) {\n                    if (!grid[period][day].subject) {\n                        const teacherKey = `${allocation.teacher}_${day}_${period}`;\n                        \n                        if (!teacherSchedule[teacherKey] && dailyAllocations[day] + 1 <= maxHoursPerDay) {\n                            let score = 0;\n                            \n                            // Heavily penalize consecutive same subjects\n                            if (wouldCreateConsecutive(allocation.subject, day, period)) {\n                                score -= 1000;\n                            }\n                            \n                            // Reward diversity (fewer of this subject in the day)\n                            const subjectCountInDay = dailySubjectCount[day][allocation.subject] || 0;\n                            score += (5 - subjectCountInDay) * 10;\n                            \n                            // Reward overall day diversity\n                            score += getDiversityScore(day, period) * 5;\n                            \n                            // For high priority subjects, add randomness to avoid clustering on specific days\n                            if (allocation.priority === 'high') {\n                                // Add random factor to distribute high priority subjects across all days\n                                score += Math.random() * 20;\n                                // Remove the day preference that was causing Friday clustering\n                            } else {\n                                // Keep slight preference for spreading across different days for normal subjects\n                                score += (workingDays - day) * 2;\n                            }\n                            \n                            candidates.push({\n                                day,\n                                period,\n                                priority: score\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Sort candidates by priority (higher is better)\n        candidates.sort((a, b) => {\n            if (isDoubleSlot) {\n                // For labs, prioritize balanced distribution across sections\n                return (a.labCount || 0) - (b.labCount || 0);\n            }\n            return b.priority - a.priority;\n        });\n        \n        return candidates;\n    }\n    \n    for (const allocation of allocationPlan) {\n        let allocated = false;\n        \n        if (allocation.isLab && allocation.labDuration === 'double') {\n            // Handle double-period labs\n            const candidates = findBestSlots(allocation, true);\n            \n            for (const candidate of candidates) {\n                const { day, period } = candidate;\n                \n                // Allocate both periods for lab\n                grid[period][day] = {\n                    subject: allocation.subject,\n                    subjectCode: allocation.subjectCode,\n                    teacher: allocation.teacher,\n                    isBreak: false,\n                    isLab: true,\n                    labPart: 1\n                };\n                grid[period + 1][day] = {\n                    subject: allocation.subject,\n                    subjectCode: allocation.subjectCode,\n                    teacher: allocation.teacher,\n                    isBreak: false,\n                    isLab: true,\n                    labPart: 2\n                };\n                \n                const teacherKey1 = `${allocation.teacher}_${day}_${period}`;\n                const teacherKey2 = `${allocation.teacher}_${day}_${period + 1}`;\n                teacherSchedule[teacherKey1] = true;\n                teacherSchedule[teacherKey2] = true;\n                dailyAllocations[day] += 2;\n                \n                // Track lab allocation for section balancing\n                const labKey = `${allocation.subjectCode}_lab`;\n                data.globalLabTracker[labKey] = (data.globalLabTracker[labKey] || 0) + 1;\n                \n                allocation.allocated = true;\n                allocated = true;\n                break;\n            }\n        } else {\n            // Handle regular theory subjects with enhanced constraints\n            const candidates = findBestSlots(allocation, false);\n            \n            for (const candidate of candidates) {\n                const { day, period } = candidate;\n                \n                if (data.sectionNumber) {\n                    console.log(`✓ Section ${data.sectionNumber}: ${allocation.teacher} allocated to Day ${day+1} Period ${period+1} for ${allocation.subject}`);\n                }\n                \n                // Allocate the slot\n                grid[period][day] = {\n                    subject: allocation.subject,\n                    subjectCode: allocation.subjectCode,\n                    teacher: allocation.teacher,\n                    isBreak: false\n                };\n                \n                const teacherKey = `${allocation.teacher}_${day}_${period}`;\n                teacherSchedule[teacherKey] = true;\n                dailyAllocations[day] += 1;\n                \n                // Update daily subject count\n                if (!dailySubjectCount[day][allocation.subject]) {\n                    dailySubjectCount[day][allocation.subject] = 0;\n                }\n                dailySubjectCount[day][allocation.subject]++;\n                \n                allocation.allocated = true;\n                allocated = true;\n                break;\n            }\n        }\n        \n        if (!allocated) {\n            console.warn('Could not allocate with constraints:', allocation);\n        }\n    }\n    \n    // Before filling with \"OFF\", check for high priority subjects that can fill empty slots\n    const emptySlots = [];\n    for (let day = 0; day < workingDays; day++) {\n        for (let period = 0; period < maxHoursPerDay; period++) {\n            if (!grid[period][day].subject) {\n                emptySlots.push({ day, period });\n            }\n        }\n    }\n    \n    // If there are empty slots and high priority subjects exist, fill them\n    if (emptySlots.length > 0 && data.subjects) {\n        const highPrioritySubjects = data.subjects.filter(subject => subject.priority === 'high');\n        \n        if (highPrioritySubjects.length > 0) {\n            console.log(`Found ${emptySlots.length} empty slots to fill with ${highPrioritySubjects.length} high priority subjects`);\n            \n            // Shuffle empty slots to ensure random distribution across days\n            for (let i = emptySlots.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [emptySlots[i], emptySlots[j]] = [emptySlots[j], emptySlots[i]];\n            }\n            \n            // Distribute empty slots equally among high priority subjects\n            const slotsPerSubject = Math.floor(emptySlots.length / highPrioritySubjects.length);\n            const leftoverSlots = emptySlots.length % highPrioritySubjects.length;\n            \n            let slotIndex = 0;\n            highPrioritySubjects.forEach((subject, subjectIndex) => {\n                const slotsForThisSubject = slotsPerSubject + (subjectIndex < leftoverSlots ? 1 : 0);\n                \n                for (let i = 0; i < slotsForThisSubject && slotIndex < emptySlots.length; i++) {\n                    const slot = emptySlots[slotIndex];\n                    const teacher = subject.teachers[i % subject.teachers.length]; // Rotate through teachers\n                    \n                    // Check teacher availability across sections for this time slot\n                    const teacherKey = `${teacher}_${slot.day}_${slot.period}`;\n                    \n                    if (!teacherSchedule[teacherKey]) {\n                        grid[slot.period][slot.day] = {\n                            subject: subject.name,\n                            subjectCode: subject.code,\n                            teacher: teacher,\n                            isBreak: false,\n                            priority: 'high'\n                        };\n                        \n                        // Mark teacher as busy at this time\n                        teacherSchedule[teacherKey] = true;\n                        slotIndex++;\n                    } else {\n                        // If teacher is busy, try next slot\n                        i--;\n                    }\n                }\n            });\n            \n            console.log(`Filled ${slotIndex} empty slots with high priority subjects randomly distributed`);\n        }\n    }\n    \n    // Fill remaining empty slots based on freeLectures setting\n    const freeLecturesAllowed = parseInt(data.freeLectures) || 0;\n    let freeSlotsFilled = 0;\n    let remainingEmptySlots = [];\n    \n    // Count and log empty slots\n    for (let day = 0; day < workingDays; day++) {\n        for (let period = 0; period < maxHoursPerDay; period++) {\n            if (!grid[period][day].subject) {\n                emptySlots.push({day, period});\n            }\n        }\n    }\n    \n    console.log(`Found ${remainingEmptySlots.length} empty slots to fill. Free lectures allowed: ${freeLecturesAllowed}`);\n    \n    // Fill empty slots\n    for (const {day, period} of remainingEmptySlots) {\n        if (freeSlotsFilled < freeLecturesAllowed) {\n            // Fill with Free period\n            grid[period][day] = {\n                subject: 'Free',\n                teacher: '',\n                subjectCode: '',\n                isBreak: false\n            };\n            freeSlotsFilled++;\n            console.log(`Filled slot [${period}][${day}] with Free period`);\n        } else {\n            // Fill with high priority subjects\n            const highPrioritySubjects = data.subjects.filter(s => s.priority === 'High');\n            const subjectsToUse = highPrioritySubjects.length > 0 ? highPrioritySubjects : data.subjects;\n            \n            const randomSubject = subjectsToUse[Math.floor(Math.random() * subjectsToUse.length)];\n            const randomTeacher = randomSubject.teachers[Math.floor(Math.random() * randomSubject.teachers.length)];\n            \n            grid[period][day] = {\n                subject: randomSubject.name,\n                teacher: randomTeacher,\n                subjectCode: randomSubject.code,\n                isBreak: false\n            };\n            console.log(`Filled slot [${period}][${day}] with ${randomSubject.name}`);\n        }\n    }\n    \n    console.log(`Final grid check - all slots filled: ${remainingEmptySlots.length} slots processed`);\n    \n    return true;\n}\n\n// Function to display multiple section timetables\nfunction displayMultipleSectionTimetables(sectionTimetables) {\n    const container = document.getElementById('timetableContainer');\n    const exportButtons = document.getElementById('exportButtons');\n    \n    // Show export buttons\n    if (exportButtons) {\n        exportButtons.style.display = 'block';\n    }\n    \n    let html = '<div class=\"multiple-sections-container\">';\n    \n    sectionTimetables.sections.forEach((section, index) => {\n        html += `\n            <div class=\"section-timetable mb-4\">\n                <h4 class=\"section-title mb-3\">\n                    <i class=\"fas fa-users me-2\"></i>${section.className}\n                </h4>\n                ${generateTimetableHTML(section)}\n            </div>\n        `;\n        \n        if (index < sectionTimetables.sections.length - 1) {\n            html += '<hr class=\"section-divider\">';\n        }\n    });\n    \n    html += '</div>';\n    container.innerHTML = html;\n}\n\n// Function to calculate actual time based on start time and lecture duration\nfunction calculateTimeSlot(startTime, periodIndex, lectureDuration) {\n    const [hours, minutes] = startTime.split(':').map(Number);\n    const startMinutes = hours * 60 + minutes;\n    \n    const startSlotMinutes = startMinutes + (periodIndex * lectureDuration);\n    const endSlotMinutes = startSlotMinutes + lectureDuration;\n    \n    const formatTime = (totalMinutes) => {\n        const h = Math.floor(totalMinutes / 60) % 24;\n        const m = totalMinutes % 60;\n        return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;\n    };\n    \n    return `${formatTime(startSlotMinutes)} - ${formatTime(endSlotMinutes)}`;\n}\n\n// Updated function to generate timetable HTML exactly matching the college format from the image\nfunction generateTimetableHTML(timetable) {\n    const { timetableGrid, workingDays, startTime, lectureDuration, breakEnabled, breakStart, breakDurationMinutes } = timetable;\n    const days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];\n    \n    let html = '<div class=\"table-responsive\">';\n    html += '<table class=\"table table-bordered college-timetable-table\">';\n    \n    // Header row with time slots\n    html += '<thead><tr>';\n    html += '<th class=\"day-time-header\">DAY \\\\ TIME</th>';\n    \n    // Calculate and display time slots\n    const [hours, minutes] = startTime.split(':').map(Number);\n    let currentMinutes = hours * 60 + minutes;\n    \n    for (let period = 0; period < timetable.maxHoursPerDay; period++) {\n        // Add break before this period if it's the break period\n        if (breakEnabled && period === breakStart && breakDurationMinutes) {\n            const breakStartTime = formatTime(currentMinutes);\n            const breakEndTime = formatTime(currentMinutes + breakDurationMinutes);\n            html += `<th class=\"break-header\">BREAK<br><small>(${breakStartTime}-${breakEndTime})</small></th>`;\n            currentMinutes += breakDurationMinutes;\n        }\n        \n        // Add regular period header\n        const periodStartTime = formatTime(currentMinutes);\n        const periodEndTime = formatTime(currentMinutes + lectureDuration);\n        html += `<th class=\"time-header\">${periodStartTime}-${periodEndTime}</th>`;\n        currentMinutes += lectureDuration;\n    }\n    html += '</tr></thead><tbody>';\n    \n    // Data rows - each day as a row\n    for (let day = 0; day < workingDays; day++) {\n        html += '<tr>';\n        html += `<td class=\"day-cell\">${days[day]}</td>`;\n        \n        // Reset time tracking for break insertion\n        let currentPeriodMinutes = (hours * 60 + minutes);\n        \n        for (let period = 0; period < timetable.maxHoursPerDay; period++) {\n            // Add break cell if this is the break period\n            if (breakEnabled && period === breakStart && breakDurationMinutes) {\n                html += `<td class=\"break-cell\">BREAK</td>`;\n                currentPeriodMinutes += breakDurationMinutes;\n            }\n            \n            const cell = timetableGrid[period][day];\n            let cellClass = 'subject-cell';\n            let cellContent = '';\n            \n            if (cell.isBreak) {\n                // Skip break cells as they're handled above\n                continue;\n            } else if (cell.subject === 'Free') {\n                cellContent = 'Free';\n                cellClass += ' free-cell';\n            } else if (!cell.subject || cell.subject === '') {\n                cellContent = 'OFF';\n                cellClass += ' off-cell';\n            } else if (cell.subject) {\n                if (cell.isLab) {\n                    cellClass += ' lab-cell';\n                    if (cell.labPart === 1) {\n                        cellContent = `${cell.subjectCode}<br><small>${cell.subject} LAB</small><br><small>${getShortName(cell.teacher)}</small>`;\n                    } else {\n                        cellContent = `${cell.subjectCode}(CONT)<br><small>${cell.subject} LAB</small><br><small>${getShortName(cell.teacher)}</small>`;\n                    }\n                } else {\n                    cellContent = `${cell.subjectCode}<br><small>${cell.subject}</small><br><small>${getShortName(cell.teacher)}</small>`;\n                }\n            }\n            \n            html += `<td class=\"${cellClass}\">${cellContent}</td>`;\n            currentPeriodMinutes += lectureDuration;\n        }\n        html += '</tr>';\n    }\n    \n    html += '</tbody></table></div>';\n    return html;\n}\n\n// Function to calculate all time slots including breaks\nfunction calculateAllTimeSlots(startTime, maxPeriods, lectureDuration, breakEnabled, breakStart, breakDurationMinutes) {\n    const timeSlots = [];\n    const [hours, minutes] = startTime.split(':').map(Number);\n    let currentMinutes = hours * 60 + minutes;\n    \n    for (let period = 0; period < maxPeriods; period++) {\n        // Add break before this period if it's the break period\n        if (breakEnabled && period === breakStart && breakDurationMinutes) {\n            const breakStartTime = formatTime(currentMinutes);\n            const breakEndTime = formatTime(currentMinutes + breakDurationMinutes);\n            timeSlots.push({\n                time: `${breakStartTime} - ${breakEndTime}`,\n                isBreak: true\n            });\n            currentMinutes += breakDurationMinutes;\n        }\n        \n        // Add regular period\n        const periodStartTime = formatTime(currentMinutes);\n        const periodEndTime = formatTime(currentMinutes + lectureDuration);\n        timeSlots.push({\n            time: `${periodStartTime} - ${periodEndTime}`,\n            isBreak: false\n        });\n        currentMinutes += lectureDuration;\n    }\n    \n    return timeSlots;\n}\n\n// Helper function to get short name (initials or first name)\nfunction getShortName(fullName) {\n    if (!fullName) return '';\n    \n    const words = fullName.trim().split(' ');\n    if (words.length === 1) {\n        // Single word - return first 8 characters\n        return words[0].substring(0, 8);\n    } else {\n        // Multiple words - return initials\n        return words.map(word => word.charAt(0).toUpperCase()).join('.');\n    }\n}\n\n// Helper function to format time\nfunction formatTime(totalMinutes) {\n    const hours = Math.floor(totalMinutes / 60) % 24;\n    const mins = totalMinutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n}\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction displayTimetable(timetableData) {\n    const container = document.getElementById('timetableContainer');\n    const exportButtons = document.getElementById('exportButtons');\n    \n    if (!container) return;\n    \n    currentTimetableData = timetableData;\n    \n    // Generate timetable HTML with time display\n    const timetableHtml = generateTimetableHTML(timetableData);\n    container.innerHTML = timetableHtml;\n    \n    // Show export buttons\n    if (exportButtons) {\n        exportButtons.style.display = 'block';\n    }\n    \n    // Add animation to the timetable\n    const table = container.querySelector('.timetable-table');\n    if (table) {\n        table.classList.add('animate-fade-in');\n    }\n}\n\nfunction exportTimetable(format) {\n    if (!currentTimetableData) {\n        showToast('No timetable to export', 'warning');\n        return;\n    }\n    \n    exportTimetableData(currentTimetableData, format);\n}\n\n// Initialize generator when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    // This will be called from the individual timetable pages\n    // with the appropriate generator type\n});\n\n// Export generator functions\nwindow.GeneratorModule = {\n    initializeGenerator,\n    addSubject,\n    removeSubject,\n    addTeacherToSubject,\n    removeTeacher,\n    toggleLabOptions,\n    handleTimetableGeneration,\n    exportTimetable,\n    loadSavedSubjects\n};\n","size_bytes":91658},"static/js/manage.js":{"content":"// Subject and Teacher Management module for AI Timetable Generator\n\nlet selectedSubjects = new Set();\n\n// Initialize management page\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (!requireAuth()) return;\n    \n    initializeManagement();\n    setupEventListeners();\n    loadSubjects();\n});\n\nfunction initializeManagement() {\n    // Setup form validation\n    const form = document.getElementById('subjectForm');\n    if (form) {\n        form.addEventListener('submit', handleSubjectSubmission);\n    }\n    \n    // Add initial teacher input if none exists\n    addInitialTeacher();\n}\n\nfunction setupEventListeners() {\n    // Search functionality\n    const searchInput = document.getElementById('searchInput');\n    if (searchInput) {\n        searchInput.addEventListener('input', debounce(filterSubjects, 300));\n    }\n}\n\nfunction addInitialTeacher() {\n    const teachersList = document.getElementById('teachersList');\n    if (teachersList && teachersList.children.length === 0) {\n        addTeacher();\n    }\n}\n\nfunction addTeacher() {\n    const teachersList = document.getElementById('teachersList');\n    const teacherDiv = document.createElement('div');\n    teacherDiv.className = 'input-group mb-2 animate-slide-up';\n    teacherDiv.innerHTML = `\n        <input type=\"text\" class=\"form-control teacher-input\" placeholder=\"Teacher Name\" required>\n        <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeTeacher(this)\">\n            <i class=\"fas fa-trash\"></i>\n        </button>\n    `;\n    teachersList.appendChild(teacherDiv);\n}\n\nfunction removeTeacher(button) {\n    const teacherDiv = button.closest('.input-group');\n    const teachersList = teacherDiv.parentNode;\n    \n    // Don't allow removing the last teacher\n    if (teachersList.children.length <= 1) {\n        showToast('At least one teacher is required', 'warning');\n        return;\n    }\n    \n    teacherDiv.style.animation = 'slideUp 0.3s ease-out reverse';\n    setTimeout(() => {\n        teacherDiv.remove();\n    }, 300);\n}\n\nfunction handleSubjectSubmission(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    if (!validateForm(form)) {\n        return;\n    }\n    \n    const formData = collectSubjectFormData();\n    if (!formData) {\n        return;\n    }\n    \n    // Check for duplicates\n    const existingSubjects = getSubjectsFromStorage();\n    const duplicate = existingSubjects.find(s => \n        s.subjectCode.toLowerCase() === formData.subjectCode.toLowerCase() &&\n        s.courseName.toLowerCase() === formData.courseName.toLowerCase() &&\n        s.className.toLowerCase() === formData.className.toLowerCase()\n    );\n    \n    if (duplicate) {\n        showToast('A subject with this code already exists for this course and class', 'error');\n        return;\n    }\n    \n    // Save subject\n    const newSubject = {\n        id: generateId(),\n        ...formData,\n        createdAt: new Date().toISOString()\n    };\n    \n    existingSubjects.push(newSubject);\n    \n    if (saveSubjectsToStorage(existingSubjects)) {\n        showToast('Subject saved successfully!', 'success');\n        resetForm(form);\n        addInitialTeacher();\n        loadSubjects();\n        \n        // Save to history as well\n        saveTimetableToHistory(`Added Subject: ${formData.subjectName}`, {\n            type: 'subject_added',\n            subject: newSubject\n        });\n    } else {\n        showToast('Failed to save subject. Please try again.', 'error');\n    }\n}\n\nfunction collectSubjectFormData() {\n    const courseName = document.getElementById('courseName').value.trim();\n    const className = document.getElementById('className').value.trim();\n    const subjectCode = document.getElementById('subjectCode').value.trim();\n    const subjectName = document.getElementById('subjectName').value.trim();\n    \n    // Collect teachers\n    const teacherInputs = document.querySelectorAll('.teacher-input');\n    const teacherNames = [];\n    \n    for (const input of teacherInputs) {\n        const teacher = input.value.trim();\n        if (teacher) {\n            teacherNames.push(teacher);\n        }\n    }\n    \n    if (!courseName || !className || !subjectCode || !subjectName) {\n        showToast('Please fill in all required fields', 'error');\n        return null;\n    }\n    \n    if (teacherNames.length === 0) {\n        showToast('Please add at least one teacher', 'error');\n        return null;\n    }\n    \n    return {\n        courseName,\n        className,\n        subjectCode,\n        subjectName,\n        teacherNames\n    };\n}\n\nfunction loadSubjects() {\n    const subjects = getSubjectsFromStorage();\n    const container = document.getElementById('subjectsContainer');\n    \n    if (!container) return;\n    \n    if (subjects.length === 0) {\n        container.innerHTML = `\n            <div class=\"text-center text-muted py-5\">\n                <i class=\"fas fa-book fa-3x mb-3\"></i>\n                <h5>No Subjects Found</h5>\n                <p>Add your first subject using the form on the left.</p>\n            </div>\n        `;\n        return;\n    }\n    \n    // Sort subjects by course, then class, then subject name\n    subjects.sort((a, b) => {\n        if (a.courseName !== b.courseName) {\n            return a.courseName.localeCompare(b.courseName);\n        }\n        if (a.className !== b.className) {\n            return a.className.localeCompare(b.className);\n        }\n        return a.subjectName.localeCompare(b.subjectName);\n    });\n    \n    let html = '';\n    subjects.forEach((subject, index) => {\n        html += generateSubjectCard(subject, index);\n    });\n    \n    container.innerHTML = html;\n}\n\nfunction generateSubjectCard(subject, index) {\n    const teacherBadges = subject.teacherNames.map(teacher => \n        `<span class=\"teacher-badge\">${teacher}</span>`\n    ).join(' ');\n    \n    const isSelected = selectedSubjects.has(subject.id);\n    \n    return `\n        <div class=\"subject-item animate-slide-up ${isSelected ? 'selected' : ''}\" \n             style=\"animation-delay: ${index * 0.05}s\" data-id=\"${subject.id}\">\n            <div class=\"subject-header\">\n                <div class=\"d-flex align-items-center\">\n                    <div class=\"form-check me-3\">\n                        <input class=\"form-check-input\" type=\"checkbox\" \n                               ${isSelected ? 'checked' : ''} \n                               onchange=\"toggleSubjectSelection('${subject.id}', this.checked)\">\n                    </div>\n                    <div class=\"flex-grow-1\">\n                        <div class=\"d-flex justify-content-between align-items-start\">\n                            <div>\n                                <h6 class=\"mb-1\">${subject.subjectName}</h6>\n                                <span class=\"subject-code\">${subject.subjectCode}</span>\n                            </div>\n                            <div class=\"dropdown\">\n                                <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" \n                                        type=\"button\" data-bs-toggle=\"dropdown\">\n                                    <i class=\"fas fa-ellipsis-v\"></i>\n                                </button>\n                                <ul class=\"dropdown-menu\">\n                                    <li><a class=\"dropdown-item\" href=\"#\" onclick=\"editSubject('${subject.id}')\">\n                                        <i class=\"fas fa-edit me-2\"></i>Edit\n                                    </a></li>\n                                    <li><a class=\"dropdown-item\" href=\"#\" onclick=\"duplicateSubject('${subject.id}')\">\n                                        <i class=\"fas fa-copy me-2\"></i>Duplicate\n                                    </a></li>\n                                    <li><hr class=\"dropdown-divider\"></li>\n                                    <li><a class=\"dropdown-item text-danger\" href=\"#\" onclick=\"deleteSubject('${subject.id}')\">\n                                        <i class=\"fas fa-trash me-2\"></i>Delete\n                                    </a></li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"mt-2\">\n                <small class=\"text-primary\">\n                    <i class=\"fas fa-graduation-cap me-1\"></i>${subject.courseName}\n                </small>\n                <small class=\"text-secondary ms-2\">\n                    <i class=\"fas fa-users me-1\"></i>${subject.className}\n                </small>\n            </div>\n            \n            <div class=\"mt-2\">\n                <small class=\"text-muted d-block mb-1\">Teachers:</small>\n                ${teacherBadges}\n            </div>\n            \n            <div class=\"mt-2\">\n                <small class=\"text-muted\">\n                    <i class=\"fas fa-calendar me-1\"></i>Added: ${formatDateTime(subject.createdAt).date}\n                </small>\n            </div>\n        </div>\n    `;\n}\n\nfunction toggleSubjectSelection(subjectId, isSelected) {\n    if (isSelected) {\n        selectedSubjects.add(subjectId);\n    } else {\n        selectedSubjects.delete(subjectId);\n    }\n    \n    // Update visual state\n    const subjectItem = document.querySelector(`[data-id=\"${subjectId}\"]`);\n    if (subjectItem) {\n        subjectItem.classList.toggle('selected', isSelected);\n    }\n}\n\nfunction filterSubjects() {\n    const searchTerm = document.getElementById('searchInput').value.toLowerCase();\n    const subjectItems = document.querySelectorAll('.subject-item');\n    \n    subjectItems.forEach(item => {\n        const text = item.textContent.toLowerCase();\n        const isVisible = text.includes(searchTerm);\n        item.style.display = isVisible ? 'block' : 'none';\n    });\n}\n\nfunction editSubject(subjectId) {\n    const subjects = getSubjectsFromStorage();\n    const subject = subjects.find(s => s.id === subjectId);\n    \n    if (!subject) return;\n    \n    // Populate edit form\n    document.getElementById('editId').value = subjectId;\n    document.getElementById('editCourseName').value = subject.courseName;\n    document.getElementById('editClassName').value = subject.className;\n    document.getElementById('editSubjectCode').value = subject.subjectCode;\n    document.getElementById('editSubjectName').value = subject.subjectName;\n    \n    // Populate teachers\n    const editTeachersList = document.getElementById('editTeachersList');\n    editTeachersList.innerHTML = '';\n    \n    subject.teacherNames.forEach(teacher => {\n        const teacherDiv = document.createElement('div');\n        teacherDiv.className = 'input-group mb-2';\n        teacherDiv.innerHTML = `\n            <input type=\"text\" class=\"form-control edit-teacher-input\" value=\"${teacher}\" required>\n            <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeEditTeacher(this)\">\n                <i class=\"fas fa-trash\"></i>\n            </button>\n        `;\n        editTeachersList.appendChild(teacherDiv);\n    });\n    \n    const modal = new bootstrap.Modal(document.getElementById('editModal'));\n    modal.show();\n}\n\nfunction addEditTeacher() {\n    const editTeachersList = document.getElementById('editTeachersList');\n    const teacherDiv = document.createElement('div');\n    teacherDiv.className = 'input-group mb-2';\n    teacherDiv.innerHTML = `\n        <input type=\"text\" class=\"form-control edit-teacher-input\" placeholder=\"Teacher Name\" required>\n        <button type=\"button\" class=\"btn btn-outline-danger\" onclick=\"removeEditTeacher(this)\">\n            <i class=\"fas fa-trash\"></i>\n        </button>\n    `;\n    editTeachersList.appendChild(teacherDiv);\n}\n\nfunction removeEditTeacher(button) {\n    const teacherDiv = button.closest('.input-group');\n    const teachersList = teacherDiv.parentNode;\n    \n    if (teachersList.children.length <= 1) {\n        showToast('At least one teacher is required', 'warning');\n        return;\n    }\n    \n    teacherDiv.remove();\n}\n\nfunction updateSubject() {\n    const form = document.getElementById('editForm');\n    if (!form.checkValidity()) {\n        form.classList.add('was-validated');\n        return;\n    }\n    \n    const subjectId = document.getElementById('editId').value;\n    const subjects = getSubjectsFromStorage();\n    const subjectIndex = subjects.findIndex(s => s.id === subjectId);\n    \n    if (subjectIndex === -1) return;\n    \n    // Collect teachers\n    const editTeacherInputs = document.querySelectorAll('.edit-teacher-input');\n    const teacherNames = [];\n    \n    for (const input of editTeacherInputs) {\n        const teacher = input.value.trim();\n        if (teacher) {\n            teacherNames.push(teacher);\n        }\n    }\n    \n    if (teacherNames.length === 0) {\n        showToast('Please add at least one teacher', 'error');\n        return;\n    }\n    \n    // Update subject\n    subjects[subjectIndex] = {\n        ...subjects[subjectIndex],\n        courseName: document.getElementById('editCourseName').value.trim(),\n        className: document.getElementById('editClassName').value.trim(),\n        subjectCode: document.getElementById('editSubjectCode').value.trim(),\n        subjectName: document.getElementById('editSubjectName').value.trim(),\n        teacherNames: teacherNames\n    };\n    \n    if (saveSubjectsToStorage(subjects)) {\n        bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();\n        loadSubjects();\n        showToast('Subject updated successfully!', 'success');\n    } else {\n        showToast('Failed to update subject', 'error');\n    }\n}\n\nfunction duplicateSubject(subjectId) {\n    const subjects = getSubjectsFromStorage();\n    const original = subjects.find(s => s.id === subjectId);\n    \n    if (!original) return;\n    \n    const duplicate = {\n        ...original,\n        id: generateId(),\n        subjectCode: original.subjectCode + '_COPY',\n        subjectName: original.subjectName + ' (Copy)',\n        createdAt: new Date().toISOString()\n    };\n    \n    subjects.push(duplicate);\n    \n    if (saveSubjectsToStorage(subjects)) {\n        loadSubjects();\n        showToast('Subject duplicated successfully!', 'success');\n    } else {\n        showToast('Failed to duplicate subject', 'error');\n    }\n}\n\nfunction deleteSubject(subjectId) {\n    if (!confirm('Are you sure you want to delete this subject?')) return;\n    \n    const subjects = getSubjectsFromStorage();\n    const updatedSubjects = subjects.filter(s => s.id !== subjectId);\n    \n    if (saveSubjectsToStorage(updatedSubjects)) {\n        selectedSubjects.delete(subjectId);\n        loadSubjects();\n        showToast('Subject deleted successfully!', 'success');\n    } else {\n        showToast('Failed to delete subject', 'error');\n    }\n}\n\n// Bulk actions\nfunction selectAllSubjects() {\n    const checkboxes = document.querySelectorAll('.subject-item input[type=\"checkbox\"]');\n    checkboxes.forEach(cb => {\n        if (!cb.checked) {\n            cb.checked = true;\n            const subjectId = cb.closest('.subject-item').dataset.id;\n            selectedSubjects.add(subjectId);\n            cb.closest('.subject-item').classList.add('selected');\n        }\n    });\n}\n\nfunction clearSelection() {\n    const checkboxes = document.querySelectorAll('.subject-item input[type=\"checkbox\"]');\n    checkboxes.forEach(cb => {\n        cb.checked = false;\n        cb.closest('.subject-item').classList.remove('selected');\n    });\n    selectedSubjects.clear();\n}\n\nfunction deleteSelected() {\n    if (selectedSubjects.size === 0) {\n        showToast('No subjects selected', 'warning');\n        return;\n    }\n    \n    if (!confirm(`Are you sure you want to delete ${selectedSubjects.size} selected subject(s)?`)) return;\n    \n    const subjects = getSubjectsFromStorage();\n    const updatedSubjects = subjects.filter(s => !selectedSubjects.has(s.id));\n    \n    if (saveSubjectsToStorage(updatedSubjects)) {\n        selectedSubjects.clear();\n        loadSubjects();\n        showToast('Selected subjects deleted successfully!', 'success');\n    } else {\n        showToast('Failed to delete subjects', 'error');\n    }\n}\n\nfunction duplicateSelected() {\n    if (selectedSubjects.size === 0) {\n        showToast('No subjects selected', 'warning');\n        return;\n    }\n    \n    const subjects = getSubjectsFromStorage();\n    const newSubjects = [];\n    \n    selectedSubjects.forEach(subjectId => {\n        const original = subjects.find(s => s.id === subjectId);\n        if (original) {\n            newSubjects.push({\n                ...original,\n                id: generateId(),\n                subjectCode: original.subjectCode + '_COPY',\n                subjectName: original.subjectName + ' (Copy)',\n                createdAt: new Date().toISOString()\n            });\n        }\n    });\n    \n    const updatedSubjects = [...subjects, ...newSubjects];\n    \n    if (saveSubjectsToStorage(updatedSubjects)) {\n        selectedSubjects.clear();\n        loadSubjects();\n        showToast(`${newSubjects.length} subject(s) duplicated successfully!`, 'success');\n    } else {\n        showToast('Failed to duplicate subjects', 'error');\n    }\n}\n\n// Export/Import functionality\nfunction exportSubjects() {\n    const subjects = getSubjectsFromStorage();\n    \n    if (subjects.length === 0) {\n        showToast('No subjects to export', 'warning');\n        return;\n    }\n    \n    const dataStr = JSON.stringify(subjects, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    \n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(dataBlob);\n    link.download = `subjects_${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n    \n    showToast('Subjects exported successfully!', 'success');\n}\n\nfunction importSubjects() {\n    const modal = new bootstrap.Modal(document.getElementById('importModal'));\n    modal.show();\n}\n\nfunction processImport() {\n    const fileInput = document.getElementById('importFile');\n    const file = fileInput.files[0];\n    \n    if (!file) {\n        showToast('Please select a file to import', 'warning');\n        return;\n    }\n    \n    const reader = new FileReader();\n    reader.onload = function(e) {\n        try {\n            const importedData = JSON.parse(e.target.result);\n            \n            if (!Array.isArray(importedData)) {\n                throw new Error('Invalid file format');\n            }\n            \n            // Validate data structure\n            for (const item of importedData) {\n                if (!item.courseName || !item.className || !item.subjectCode || !item.subjectName) {\n                    throw new Error('Missing required fields in import data');\n                }\n            }\n            \n            const existingSubjects = getSubjectsFromStorage();\n            let importCount = 0;\n            let skipCount = 0;\n            \n            importedData.forEach(item => {\n                // Check for duplicates\n                const exists = existingSubjects.some(existing => \n                    existing.subjectCode.toLowerCase() === item.subjectCode.toLowerCase() &&\n                    existing.courseName.toLowerCase() === item.courseName.toLowerCase() &&\n                    existing.className.toLowerCase() === item.className.toLowerCase()\n                );\n                \n                if (!exists) {\n                    existingSubjects.push({\n                        ...item,\n                        id: generateId(),\n                        createdAt: new Date().toISOString()\n                    });\n                    importCount++;\n                } else {\n                    skipCount++;\n                }\n            });\n            \n            if (saveSubjectsToStorage(existingSubjects)) {\n                bootstrap.Modal.getInstance(document.getElementById('importModal')).hide();\n                loadSubjects();\n                \n                let message = `Import completed! ${importCount} subjects imported.`;\n                if (skipCount > 0) {\n                    message += ` ${skipCount} subjects skipped (duplicates).`;\n                }\n                \n                showToast(message, 'success');\n            } else {\n                showToast('Failed to save imported subjects', 'error');\n            }\n            \n        } catch (error) {\n            console.error('Import error:', error);\n            showToast('Invalid file format or corrupted data', 'error');\n        }\n    };\n    \n    reader.readAsText(file);\n}\n\n// Utility function for debouncing\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Export management functions\nwindow.ManageModule = {\n    addTeacher,\n    removeTeacher,\n    editSubject,\n    updateSubject,\n    deleteSubject,\n    duplicateSubject,\n    selectAllSubjects,\n    clearSelection,\n    deleteSelected,\n    duplicateSelected,\n    exportSubjects,\n    importSubjects,\n    processImport,\n    addEditTeacher,\n    removeEditTeacher\n};\n","size_bytes":21140},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}},"version":1}